<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>模块二 on 请跟我一起踏上编程之旅</title>
    <link>https://www.zhugeqing.top/study_zhugeqing/operatingsystem/chapter2/</link>
    <description>Recent content in 模块二 on 请跟我一起踏上编程之旅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, “不可能”这三个字，你说的太多了！</copyright>
    <lastBuildDate>Wed, 05 May 2021 12:00:56 +0900</lastBuildDate>
    <sy:updatePeriod>weekly&#39;</sy:updatePeriod>
    
        <atom:link href="https://www.zhugeqing.top/study_zhugeqing/operatingsystem/chapter2/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>01</title>
        <link>https://www.zhugeqing.top/study_zhugeqing/operatingsystem/chapter2/1/</link>
        <pubDate>Wed, 05 May 2021 12:00:56 +0900</pubDate>
        
        <atom:modified>Wed, 05 May 2021 12:00:56 +0900</atom:modified>
        <guid>https://www.zhugeqing.top/study_zhugeqing/operatingsystem/chapter2/1/</guid>
        <description>什么是 Shell 在我们学习 Linux 指令之前，先来说一下什么是 Shell？Shell 把我们输入的指令，传递给操作系统去执行，所以 Shell 是一个命令行的用户界面。 早期程序员没有图形界面用，就用 Shell。而且图形界面制作成本较高，不能实现所有功能，因此今天的程序员依然在用 Shell。 你平时还经常会看到一个词叫作bash（Bourne Again Shell），它是用 Shell 组成的程序。这里的 Bourne 是一个人名，Steve Bourne 是 bash 的发明者。 我们今天</description>
        <content:encoded>&lt;h2 id=&#34;什么是-shell&#34;&gt;什么是 Shell&lt;/h2&gt;
&lt;p&gt;在我们学习 Linux 指令之前，先来说一下什么是 Shell？Shell 把我们输入的指令，传递给操作系统去执行，所以 Shell 是一个命令行的用户界面。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;早期程序员没有图形界面用，就用 Shell。而且图形界面制作成本较高，不能实现所有功能，因此今天的程序员依然在用 Shell。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;你平时还经常会看到一个词叫作bash（Bourne Again Shell），它是用 Shell 组成的程序。这里的 Bourne 是一个人名，Steve Bourne 是 bash 的发明者。&lt;/p&gt;
&lt;p&gt;我们今天学习的所有指令，不是写死在操作系统中的，而是一个个程序。比如&lt;code&gt;rm&lt;/code&gt;指令，你可以用&lt;code&gt;which&lt;/code&gt;指令查看它所在的目录。如下图所示，你会发现rm指令在&lt;code&gt;/usr/bin/rm&lt;/code&gt;目录中。&lt;br /&gt;
&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/28.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，ramroll是我的英文名字，ubuntu 是我这台机器的名字。我输入了&lt;code&gt;which rm&lt;/code&gt;，然后获得了&lt;code&gt;/usr/bin/rm&lt;/code&gt;的结果，最终执行这条指令的是操作系统，连接我和操作系统的程序就是 Shell。&lt;/p&gt;
&lt;p&gt;Linux 对文件目录操作的指令就工作在 Shell 上，接下来我们讲讲文件目录操作指令。&lt;/p&gt;
&lt;h2 id=&#34;linux-对文件目录的抽象&#34;&gt;Linux 对文件目录的抽象&lt;/h2&gt;
&lt;p&gt;Linux 对文件进行了一个树状的抽象。&lt;code&gt;/&lt;/code&gt;代表根目录，每一节目录也用&lt;code&gt;/&lt;/code&gt;分开，所以在上图所展示的&lt;code&gt;/usr/bin/rm&lt;/code&gt;中，第一级目录是&lt;code&gt;/&lt;/code&gt;根目录，第二级目录是&lt;code&gt;usr&lt;/code&gt;目录，第三级是&lt;code&gt;bin&lt;/code&gt;目录。最后的&lt;code&gt;rm&lt;/code&gt;是一个文件。&lt;/p&gt;
&lt;h2 id=&#34;路径path&#34;&gt;路径（path）&lt;/h2&gt;
&lt;p&gt;像&lt;code&gt;/usr/bin/rm&lt;/code&gt;称为可执行文件&lt;code&gt;rm&lt;/code&gt;的路径。路径就是一个文件在文件系统中的地址。如果文件系统是树形结构，那么通常一个文件只有一个地址（路径）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目标文件的绝对路径（Absolute path），也叫作完全路径（full path），是从&lt;code&gt;/&lt;/code&gt;开始，接下来每一层都是一级子目录，直到定位到目标文件为止。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如上图所示的例子中，&lt;code&gt;/usr/bin/rm&lt;/code&gt;就是一个绝对路径。&lt;/p&gt;
&lt;h2 id=&#34;工作目录&#34;&gt;工作目录&lt;/h2&gt;
&lt;p&gt;为了方便你工作，Shell 还抽象出了工作目录。当用户打开 Shell 的时候，Shell 就会给用户安排一个工作目录。因此也就产生了相对路径。&lt;/p&gt;
&lt;p&gt;相对路径（Relative path）是以工作目录为基点的路径。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当用户在&lt;code&gt;/usr&lt;/code&gt;目录下的时候，&lt;code&gt;rm&lt;/code&gt;文件的相对路径就是&lt;code&gt;bin/rm&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果用户在&lt;code&gt;/usr/bin&lt;/code&gt;目录下的时候，&lt;code&gt;rm&lt;/code&gt;文件的路径就是&lt;code&gt;./rm&lt;/code&gt;或者&lt;code&gt;rm&lt;/code&gt;，这里用.代表当前目录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果用户在&lt;code&gt;/usr/bin/somedir&lt;/code&gt;下，那么&lt;code&gt;rm&lt;/code&gt;的相对路径就是&lt;code&gt;../rm&lt;/code&gt;，这里用&lt;code&gt;..&lt;/code&gt;代表上一级目录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们使用&lt;code&gt;cd（change directory）&lt;/code&gt;指令切换工作目录，既可以用绝对路径，也可以用相对路径。 这里我要强调几个注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输入&lt;code&gt;cd&lt;/code&gt;，不带任何参数会切换到用户的家目录，Linux 中通常是&lt;code&gt;/home/{用户名}&lt;/code&gt;。以我自己为例，我的家目录是&lt;code&gt;/home/ramroll&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入&lt;code&gt;cd .&lt;/code&gt;什么都不会发生，因为&lt;code&gt;.&lt;/code&gt;代表当前目录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入&lt;code&gt;cd..&lt;/code&gt;会回退一级目录，因为&lt;code&gt;..&lt;/code&gt;代表上级目录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用上面这 3 种能力，你就可以方便的构造相对路径了。&lt;/p&gt;
&lt;p&gt;Linux提供了一个指令&lt;code&gt;pwd（Print Working Directory）&lt;/code&gt;查看工作目录。下图是我输入&lt;code&gt;pwd&lt;/code&gt;的结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/29.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;你可以看到我正在&lt;code&gt;/home/ramroll/Documents&lt;/code&gt;目录下工作。&lt;/p&gt;
&lt;h2 id=&#34;几种常见的文件类型&#34;&gt;几种常见的文件类型&lt;/h2&gt;
&lt;p&gt;另一方面，Linux 下的目录也是一种文件；但是文件也不只有目录和可执行文件两种。常见的文件类型有以下 7 种:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;普通文件（比如一个文本文件）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目录文件（目录也是一个特殊的文件，它用来存储文件清单，比如/也是一个文件）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可执行文件（上面的rm就是一个可执行文件）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管道文件（我们会在 07 课时讨论管道文件）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Socket 文件（我们会在模块七网络部分讨论 Socket 文件）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软链接文件（相当于指向另一个文件所在路径的符号）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬链接文件（相当于指向另一个文件的指针，关于软硬链接我们将在模块六文件系统部分讨论）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你如果使用&lt;code&gt;ls -F&lt;/code&gt;就可以看到当前目录下的文件和它的类型。比如下面这种图：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;结尾的是可执行文件；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;= 结尾的是 Socket 文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@ 结尾的是软链接；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;| 结尾的管道文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;没有符号结尾的是普通文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/ 结尾的是目录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/30.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;设备文件&#34;&gt;设备文件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Socket 是网络插座，是客户端和服务器之间同步数据的接口&lt;/code&gt;。其实，Linux 不只把 Socket 抽象成了文件，设备基本也都被抽象成了文件。因为设备需要不断和操作系统交换数据。而交换方式只有两种——读和写。所以设备是可以抽象成文件的，因为文件也支持这两种操作。&lt;/p&gt;
&lt;p&gt;Linux 把所有的设备都抽象成了文件，比如说打印机、USB、显卡等。这让整体的系统设计变得高度统一。&lt;/p&gt;
&lt;p&gt;至此，我们了解了 Linux 对文件目录的抽象，接下来我们看看具体的增删改查指令。&lt;/p&gt;
&lt;h2 id=&#34;文件的增删改查&#34;&gt;文件的增删改查&lt;/h2&gt;
&lt;h3 id=&#34;增加&#34;&gt;增加&lt;/h3&gt;
&lt;p&gt;创建一个普通文件的方法有很多，最常见的有&lt;code&gt;touch&lt;/code&gt;指令。比如下面我们创建了一个 a.txt 文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/31.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch&lt;/code&gt;指令本来是用来更改文件的时间戳的，但是如果文件不存在&lt;code&gt;touch&lt;/code&gt;也会帮助创建一个空文件。&lt;/p&gt;
&lt;p&gt;如果你拿到一个指令不知道该怎么用，比如&lt;code&gt;touch&lt;/code&gt;，你可以用&lt;code&gt;man touch&lt;/code&gt;去获得帮助。&lt;code&gt;man&lt;/code&gt;意思是&lt;code&gt;manual&lt;/code&gt;，就是说明书的意思，这里指的是系统的手册。如果你不知道&lt;code&gt;man&lt;/code&gt;是什么，也可以使用&lt;code&gt;man man&lt;/code&gt;。下图是使用&lt;code&gt;man man&lt;/code&gt;的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/32.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;另外如果我们需要增加一个目录，就需要用到&lt;code&gt;mkdir&lt;/code&gt;指令（ make directory），比如我们创建一个&lt;code&gt;hello&lt;/code&gt;目录，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/33.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;查看&#34;&gt;查看&lt;/h3&gt;
&lt;p&gt;创建之后我们可以用&lt;code&gt;ls&lt;/code&gt;指令看到这个文件，&lt;code&gt;ls&lt;/code&gt;是 list 的缩写。下面是指令 &amp;lsquo;ls&amp;rsquo; 的执行结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/34.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们看到在当前的目录下有一个&lt;code&gt;a.txt&lt;/code&gt;文件，还有一个&lt;code&gt;hello&lt;/code&gt;目录。如果你知道当前的工作目录，就可以使用&lt;code&gt;pwd&lt;/code&gt;指令。&lt;/p&gt;
&lt;p&gt;如果想看到&lt;code&gt;a.txt&lt;/code&gt;更完善的信息，还可以使用&lt;code&gt;ls -l&lt;/code&gt;。&lt;code&gt;-l&lt;/code&gt;是&lt;code&gt;ls&lt;/code&gt;指令的可选参数。下图是&lt;code&gt;ls -l&lt;/code&gt;的结果，你可以看到&lt;code&gt;a.txt&lt;/code&gt;更详细的描述。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/35.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，我们看到两个&lt;code&gt;ramroll&lt;/code&gt;，它们是&lt;code&gt;a.txt&lt;/code&gt;所属的用户和所属的用户分组，刚好重名了。&lt;code&gt;Sep 13&lt;/code&gt;是日期。 中间有一个&lt;code&gt;0&lt;/code&gt;是&lt;code&gt;a.txt&lt;/code&gt;的文件大小，目前&lt;code&gt;a.txt&lt;/code&gt;中还没有写入内容，因此大小是&lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;另外虽然&lt;code&gt;hello&lt;/code&gt;是空的目录，但是目录文件 Linux 上来就分配了&lt;code&gt;4096&lt;/code&gt;字节的空间。这是因为目录内需要保存很多文件的描述信息。&lt;/p&gt;
&lt;h2 id=&#34;删除&#34;&gt;删除&lt;/h2&gt;
&lt;p&gt;如果我们想要删除a.txt可以用rm a.txt；如我们要删除hello目录，可以用rm hello。rm是 remove 的缩写。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/36.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是当我们输入&lt;code&gt;rm hello&lt;/code&gt;的时候，会提示&lt;code&gt;hello&lt;/code&gt;是一个目录，不可以删除。因此我们需要增加一个可选项，比如&lt;code&gt;-r&lt;/code&gt;即 &lt;code&gt;recursive（递归）&lt;/code&gt;。目录是一个递归结构，所以需要用递归删除。最后，你会发现&lt;code&gt;rm hello -r&lt;/code&gt;删除了&lt;code&gt;hello&lt;/code&gt;目录。&lt;/p&gt;
&lt;p&gt;接下来我们尝试在&lt;code&gt;hello&lt;/code&gt;目录下新增一个文件，比如相对路径是&lt;code&gt;hello/world/os.txt&lt;/code&gt;。需要先创建&lt;code&gt;hello/world&lt;/code&gt;目录。这种情况会用到&lt;code&gt;mkdir&lt;/code&gt;的&lt;code&gt;-p&lt;/code&gt;参数，这个参数控制&lt;code&gt;mkdir&lt;/code&gt;当发现目标目录的父级目录不存在的时候会递归的创建。以下是我们的执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/37.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改&#34;&gt;修改&lt;/h2&gt;
&lt;p&gt;如果需要修改一个文件，可以使用&lt;code&gt;nano&lt;/code&gt;或者&lt;code&gt;vi&lt;/code&gt;编辑器。类似的工具还有很多，但是&lt;code&gt;nano&lt;/code&gt;和&lt;code&gt;vi&lt;/code&gt;一般是&lt;code&gt;linux&lt;/code&gt;自带的。&lt;/p&gt;
&lt;p&gt;这里我不展开讲解了，你可以自己去尝试。在尝试的过程中如果遇到什么问题，可以写在留言区，我会逐一为你解答。&lt;/p&gt;
&lt;h2 id=&#34;查阅文件内容&#34;&gt;查阅文件内容&lt;/h2&gt;
&lt;p&gt;在了解了文件的增删改查操作后，下面我们来学习查阅文件内容。我们知道，Linux 下查阅文件内容，可以根据不同场景选择不同的指令。&lt;/p&gt;
&lt;p&gt;当文件较小时，比如一个配置文件，想要快速浏览这个文件，可以用&lt;code&gt;cat&lt;/code&gt;指令。下面 cat 指令帮助我们快速查看&lt;code&gt;/etc/hosts&lt;/code&gt;文件。&lt;code&gt;cat&lt;/code&gt;指令将文件连接到标准输出流并打印到屏幕上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/38.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;标准输出流（Standard Output）也是一种文件，进程可以将要输出的内容写入标准输出流文件，这样就可以在屏幕中打印。&lt;/p&gt;
&lt;p&gt;如果用&lt;code&gt;cat&lt;/code&gt;查看大文件，比如一个线上的日志文件，因为动辄有几个 G，控制台打印出所有的内容就要非常久，而且刷屏显示看不到东西。&lt;/p&gt;
&lt;p&gt;而且如果在线上进行查看大文件的操作，会带来不必要的麻烦：&lt;/p&gt;
&lt;p&gt;首先因为我们需要把文件拷贝到输入输出流，这需要花费很长时间，这个过程会占用机器资源；&lt;/p&gt;
&lt;p&gt;其次，本身文件会读取到内存中，这时内存被大量占用，很危险，这可能导致其他应用内存不足。因此我们需要一些不用加载整个文件，就能查看文件内容的指令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;more&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;more&lt;/code&gt;可以帮助我们读取文件，但不需要读取整个文件到内存中。本身&lt;code&gt;more&lt;/code&gt;的定位是一个阅读过滤器，比如你在&lt;code&gt;more&lt;/code&gt;里除了可以向下翻页，还可以输入一段文本进行搜索。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/39.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，我在&lt;code&gt;more&lt;/code&gt;查看一个 nginx 日志后，先输入一个&lt;code&gt;/&lt;/code&gt;，然后输入&lt;code&gt;192.168&lt;/code&gt;看到的结果。&lt;code&gt;more&lt;/code&gt;帮我找到了&lt;code&gt;192.168&lt;/code&gt;所在的位置，然后又帮我定位到了这个位置。整个过程 &lt;code&gt;more&lt;/code&gt; 指令只读取我们需要的部分到内存中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;less&lt;br /&gt;
&lt;code&gt;less&lt;/code&gt;是一个和&lt;code&gt;more&lt;/code&gt;功能差不多的工具，打开&lt;code&gt;man&lt;/code&gt;能够看到&lt;code&gt;less&lt;/code&gt;的介绍上写着自己是&lt;code&gt;more&lt;/code&gt;的反义词（opposite of more）。这样你可以看出&lt;code&gt;linux&lt;/code&gt;生态其实也是很自由的一个生态，在这里创造工具也可以按照自己的喜好写文档。&lt;code&gt;less&lt;/code&gt;支持向上翻页，这个功能&lt;code&gt;more&lt;/code&gt;是做不到的。所以现在&lt;code&gt;less&lt;/code&gt;用得更多一些。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;head/tail&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;head&lt;/code&gt;和&lt;code&gt;tail&lt;/code&gt;是一组，它们用来&lt;code&gt;读取一个文件的头部 N 行或者尾部 N 行&lt;/code&gt;。比如一个线上的大日志文件，当线上出了 bug，服务暂停的时候，我们就可以用&lt;code&gt;tail -n 1000&lt;/code&gt;去查看最后的 &lt;code&gt;1000&lt;/code&gt; 行日志文件，寻找导致服务异常的原因。&lt;/p&gt;
&lt;p&gt;另一个比较重要的用法是，如果你想看一个实时的nginx日志，可以使用&lt;code&gt;tail -f&lt;/code&gt; 文件名，这样你会看到用户的请求不断进来。查一下&lt;code&gt;man&lt;/code&gt;，你会发现&lt;code&gt;-f&lt;/code&gt;是 &lt;code&gt;follow&lt;/code&gt; 的意思，就是文件追加的内容会跟随输出到标准输出流。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grep&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有时候你需要查看一个指定&lt;code&gt;ip&lt;/code&gt;的nginx日志，或者查看一段时间内的&lt;code&gt;nginx&lt;/code&gt;日志。如果不想用&lt;code&gt;less&lt;/code&gt;和&lt;code&gt;more&lt;/code&gt;进入文件中去查看，就可以用&lt;code&gt;grep&lt;/code&gt;命令。Linux 的文件命名风格都很短，所以也影响了很多人，比如之前我看到过一个大牛的程序，变量名从来不超过 5 个字母，而且都有意义。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep 这个词，我们分成三段来看，是 g|re|p&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt; 就是 &lt;code&gt;global&lt;/code&gt;，全局；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;re&lt;/code&gt; 就是 &lt;code&gt;regular expression&lt;/code&gt;，正则表达式；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt; 就是 &lt;code&gt;pattern&lt;/code&gt;，模式。&lt;/p&gt;
&lt;p&gt;所以这个指令的作用是通过正则表达式全局搜索一个文件找到匹配的模式。我觉得这种命名真的很牛，软件命名也是一个世纪难题，grep这个名字不但发音不错，而且很有含义，又避免了名字过长，方便记忆。&lt;/p&gt;
&lt;p&gt;下面我们举两个例子看看 grep 的用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例 1：查找 ip 地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以通过&lt;code&gt;grep&lt;/code&gt;命令定位某个&lt;code&gt;ip&lt;/code&gt;地址的用户都做了什么事情，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/40.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例 2：查找时间段的日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以通过 grep 命令查找某个时间段内用户都做了什么事情。如下图所示，你可以看到在某个 5 分钟内所有用户的访问情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/41.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;查找文件&#34;&gt;查找文件&lt;/h2&gt;
&lt;p&gt;用户经常还会有一种诉求，就是查找文件。&lt;/p&gt;
&lt;p&gt;之前我们使用过一个&lt;code&gt;which&lt;/code&gt;指令，这个指令可以查询一个指令文件所在的位置，比如&lt;code&gt;which grep&lt;/code&gt;会，你会看到&lt;code&gt;grep&lt;/code&gt;指令被安装的位置是&lt;code&gt;/usr/bin&lt;/code&gt;。但是我们还需要一个更加通用的指令查找文件，也就是 &lt;code&gt;find&lt;/code&gt; 指令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;find 指令帮助我们在文件系统中查找文件。 比如我们如果想要查找所有&lt;code&gt;.txt&lt;/code&gt; 扩展名的文件，可以使用&lt;code&gt;find / -iname &amp;quot;*.txt&amp;quot;&lt;/code&gt;，&lt;code&gt;-iname&lt;/code&gt;这个参数是用来匹配查找的，i 字母代表忽略大小写，这里也可以用&lt;code&gt;-name&lt;/code&gt;替代。输入这条指令，你会看到不断查找文件，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/42.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;这节课我们学习了很多指令，不知道你记住了多少？最后，我们再一起复习一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt;指令查看工作目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt;指令切换工作目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;which&lt;/code&gt;指令查找一个执行文件所在的路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ls&lt;/code&gt;显示文件信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rm&lt;/code&gt;删除文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;touch&lt;/code&gt;修改一个文件的时间戳，如果文件不存在会触发创建文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;vi&lt;/code&gt;和&lt;code&gt;nano&lt;/code&gt;可以用来编辑文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cat&lt;/code&gt;查看完成的文件适合小型文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;more less&lt;/code&gt;查看一个文件但是只读取用户看到的内容到内存，因此消耗资源较少，适合在服务器上看日志。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;head````tail&lt;/code&gt;可以用来看文件的头和尾。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;grep&lt;/code&gt;指令搜索文件内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt;指令全局查找文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这里，我再强调一个指令，即&lt;code&gt;man&lt;/code&gt;指令，它是所有指令的手册，所以你一定要多多运用，熟练掌握。另外，一个指令通常有非常多的参数，但都需要用&lt;code&gt;man&lt;/code&gt;指令去仔细研究。&lt;/p&gt;
&lt;h2 id=&#34;面试题目rm--rf-的作用是&#34;&gt;面试题目：rm -rf /的作用是？&lt;/h2&gt;
&lt;p&gt;【解析】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;/是文件系统根目录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rm是删除指令；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-r是 recursive（递归）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-f是 force（强制），遇到只读文件也不提示，直接删除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所以rm -rf /就是删除整个文件系统上的所有文件，而且不用给用户提示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;小知识：&lt;br /&gt;
如果想用man看中文手册&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.打开终端，输入以下命令安装中文 man 手册&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-linux&#34; data-lang=&#34;linux&#34;&gt;sudo apt-get install manpages-zh
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;2.查看man 手册安装到哪里&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-linux&#34; data-lang=&#34;linux&#34;&gt;dpkg -L manpages-zh | less
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看到安装在/usr/share/man/zh_CN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.设一个中文man别名&lt;br /&gt;
     修改 ~/.bashrc 添加一个alias :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-linux&#34; data-lang=&#34;linux&#34;&gt;#第一步在终端输入
vim ~/.bashrc
#按i进入编辑模式，将下面添加到# some more ls aliases的下面
alias cman=&#39;man -M /usr/share/man/zh_CN&#39;
#按esc,输入wq!强制保存并退出
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;4.重启一个终端就可以用&lt;code&gt;cman&lt;/code&gt;查看中文&lt;code&gt;man&lt;/code&gt;手册了，当然查英文手册还是用&lt;code&gt;man&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content:encoded>
        <dc:creator>林䭽</dc:creator>
        <media:content url="https://www.zhugeqing.topimages/recommend_site/xingyouji.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>操作系统</category>
            
          
        
        
        
          
            
          
        
      </item>
      
      <item>
        <title>02</title>
        <link>https://www.zhugeqing.top/study_zhugeqing/operatingsystem/chapter2/2/</link>
        <pubDate>Wed, 05 May 2021 12:00:56 +0900</pubDate>
        
        <atom:modified>Wed, 05 May 2021 12:00:56 +0900</atom:modified>
        <guid>https://www.zhugeqing.top/study_zhugeqing/operatingsystem/chapter2/2/</guid>
        <description>进程 为了弄清楚这节课程的内容，也就是管道，我们先来讨论一下进程。 我们知道，应用的可执行文件是放在文件系统里，把可执行文件启动，就会在操作系统里（具体来说是内存中）形成一个应用的副本，这个副本就是进程。 插一个小知识，以后你再遇到面试题：什么是进程？ 可以回答：进程是应用的执行副本；而不要回答进程是操作系统分配资源的最小单位。前者是定义，后者是作用。 ps 如果你要看当前的进程，可以用ps指令。p 代表 proc</description>
        <content:encoded>&lt;h2 id=&#34;进程&#34;&gt;进程&lt;/h2&gt;
&lt;p&gt;为了弄清楚这节课程的内容，也就是管道，我们先来讨论一下进程。&lt;/p&gt;
&lt;p&gt;我们知道，应用的可执行文件是放在文件系统里，把可执行文件启动，就会在操作系统里（具体来说是内存中）形成一个应用的副本，这个副本就是进程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;插一个小知识，以后你再遇到面试题：什么是进程？&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;可以回答：进程是应用的执行副本；而不要回答进程是操作系统分配资源的最小单位。前者是定义，后者是作用。&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你要看当前的进程，可以用&lt;code&gt;ps&lt;/code&gt;指令。&lt;code&gt;p 代表 processes&lt;/code&gt;，也就是进程；&lt;code&gt;s 代表 snapshot&lt;/code&gt;，也就是快照。所谓快照，就是像拍照一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/43.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，我启动了两个进程，&lt;code&gt;ps&lt;/code&gt;和&lt;code&gt;bash&lt;/code&gt;。&lt;code&gt;ps&lt;/code&gt; 就是我刚刚启动的，被&lt;code&gt;ps&lt;/code&gt;自己捕捉到了；&lt;code&gt;bash&lt;/code&gt;是因为我开了这个控制台，执行的shell是&lt;code&gt;bash&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当然操作系统也不可能只有这么几个进程，这是因为不带任何参数的&lt;code&gt;ps&lt;/code&gt;指令显示的是同一个电传打字机（TTY上）的进程。&lt;code&gt;TTY&lt;/code&gt; 这个概念是一个历史的概念，过去用来传递信息，现在已经被传真、邮件、微信等取代。&lt;/p&gt;
&lt;p&gt;操作系统上的 &lt;code&gt;TTY&lt;/code&gt; 是一个输入输出终端的概念，比如用户打开 &lt;code&gt;bash&lt;/code&gt;，操作系统就为用户分配了一个输入输出终端。没有加任何参数的&lt;code&gt;ps&lt;/code&gt;只显示在同一个 &lt;code&gt;TTY&lt;/code&gt; 的进程。&lt;/p&gt;
&lt;p&gt;如果想看到所有的进程，可以用&lt;code&gt;ps -e&lt;/code&gt;，&lt;code&gt;-e&lt;/code&gt;没有特殊含义，只是为了和&lt;code&gt;-A&lt;/code&gt;区分开。我们通常不直接用&lt;code&gt;ps -e&lt;/code&gt;而是用&lt;code&gt;ps -ef&lt;/code&gt;，这是因为&lt;code&gt;-f&lt;/code&gt;可以带上更多的描述字段，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/44.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UID 指进程的所有者；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PID 是进程的唯一标识；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PPID 是进程的父进程 ID；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C 是 CPU 的利用率（就是 CPU 占用）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STIME 是开始时间；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TTY 是进程所在的 TTY，如果没有 TTY 就是 ？号；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TIME；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMD 是进程启动时的命令，如果不是一个 Shell 命令，而是用方括号括起来，那就是系统进程或者内核过程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外一个用得比较多的是&lt;code&gt;ps aux&lt;/code&gt;，它和&lt;code&gt;ps -ef&lt;/code&gt;能力差不多，但是是 &lt;code&gt;BSD&lt;/code&gt; 风格的。就是加州伯克利分校研发的 &lt;code&gt;Unix&lt;/code&gt; 分支版本的衍生风格，这种风格其实不太好描述，我截了一张图，你可以体会一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/45.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在 BSD 风格中有些字段的叫法和含义变了，如果你感兴趣，可以作为课后延伸学习的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;top&lt;/code&gt;&lt;br /&gt;
另外还有一个和&lt;code&gt;ps&lt;/code&gt;能力差不多，但是显示的不是快照而是实时更新数据的&lt;code&gt;top&lt;/code&gt;指令。因为自带的&lt;code&gt;top&lt;/code&gt;显示的内容有点少， 所以我喜欢用一个叫作&lt;code&gt;htop&lt;/code&gt;的指令，具体的安装全方法我会在 &lt;code&gt;10 | 软件的安装： 编译安装和包管理器安装有什么优势和劣势？&lt;/code&gt;中给你介绍。本课时，我们先看一下使用效果，如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/46.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以上，我们一起把进程学了一个皮毛，更多关于进程的内容我们会在模块四：进程和线程中讨论。&lt;/p&gt;
&lt;h2 id=&#34;管道pipeline&#34;&gt;管道（Pipeline）&lt;/h2&gt;
&lt;p&gt;现在你已经掌握了一点点进程的基础，下面我们来学习管道，管道（Pipeline）的作用是在命令和命令之间，传递数据。比如说一个命令的结果，就可以作为另一个命令的输入。我们了解了进程，所以这里说的&lt;code&gt;命令就是进程&lt;/code&gt;。更准确地说，&lt;code&gt;管道在进程间传递数据&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;输入输出流&#34;&gt;输入输出流&lt;/h2&gt;
&lt;p&gt;每个进程拥有自己的&lt;code&gt;标准输入流&lt;/code&gt;、&lt;code&gt;标准输出流&lt;/code&gt;、&lt;code&gt;标准错误流&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这几个标准流说起来很复杂，但其实都是文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;标准输入流（用 0 表示）可以作为进程执行的上下文（进程执行可以从输入流中获取数据）。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;标准输出流（用 1 表示）中写入的结果会被打印到屏幕上。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;如果进程在执行过程中发生异常，那么异常信息会被记录到标准错误流（用 2 表示）中。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重定向&#34;&gt;重定向&lt;/h2&gt;
&lt;p&gt;我们执行一个指令，比如&lt;code&gt;ls -l&lt;/code&gt;，结果会写入标准输出流，进而被打印。这时可以用重定向符将结果重定向到一个文件，比如说&lt;code&gt;ls -l &amp;gt; out&lt;/code&gt;，这样&lt;code&gt;out&lt;/code&gt;文件就会有&lt;code&gt;ls -l&lt;/code&gt;的结果；而屏幕上也不会再打印&lt;code&gt;ls -l&lt;/code&gt;的结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/47.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;具体来说&lt;code&gt;&amp;gt;&lt;/code&gt;符号叫作&lt;code&gt;覆盖重定向&lt;/code&gt;；&lt;code&gt;&amp;gt;&amp;gt;叫作追加重定向&lt;/code&gt;。&lt;code&gt;&amp;gt;&lt;/code&gt;每次都会把目标文件覆盖，&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;会在目标文件中追加。比如你每次启动一个程序日志都写入&lt;code&gt;/var/log/somelogfile&lt;/code&gt;中，可以这样操作，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;start.sh &amp;gt;&amp;gt; /var/log/somelogfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经过这样的操作后，每次执行程序日志就不会被覆盖了。&lt;/p&gt;
&lt;p&gt;另外还有一种情况，比如我们输入:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls1 &amp;gt; out
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果并不会存入&lt;code&gt;out&lt;/code&gt;文件，因为&lt;code&gt;ls1&lt;/code&gt;指令是不存在的。结果会输出到&lt;code&gt;标准错误流&lt;/code&gt;中，仍然在屏幕上。这里我们可以&lt;code&gt;把标准错误流也重定向到标准输出流&lt;/code&gt;，然后再&lt;code&gt;重定向到文件&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls1 &amp;amp;&amp;gt; out
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个写法等价于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls1 &amp;gt; out 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/48.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;相当于把&lt;code&gt;ls1&lt;/code&gt;的标准输出流重定向到&lt;code&gt;out&lt;/code&gt;，因为&lt;code&gt;ls1 &amp;gt; out&lt;/code&gt;出错了，&lt;code&gt;所以标准错误流被定向到了标准输出流&lt;/code&gt;。&lt;code&gt;&amp;amp;&lt;/code&gt;代表一种引用关系，具体代表的是&lt;code&gt;ls1 &amp;gt; out&lt;/code&gt;的标准输出流。&lt;/p&gt;
&lt;h2 id=&#34;管道的作用和分类&#34;&gt;管道的作用和分类&lt;/h2&gt;
&lt;p&gt;有了进程和重定向的知识，接下来我们梳理下管道的作用。&lt;code&gt;管道（Pipeline）将一个进程的输出流定向到另一个进程的输入流，就像水管一样，作用就是把这两个文件接起来。如果一个进程输出了一个字符 X，那么另一个进程就会获得 X 这个输入。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;管道和重定向很像，但是管道是一个连接一个进行计算，重定向是将一个文件的内容定向到另一个文件，这二者经常会结合使用。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Linux 中的管道也是文件，有两种类型的管道：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;匿名管道（Unnamed Pipeline），这种管道也在文件系统中，但是它只是一个存储节点，不属于任何一个目录。说白了，就是没有路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命名管道（Named Pipeline），这种管道就是一个文件，有自己的路径。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;fifo&#34;&gt;FIFO&lt;/h2&gt;
&lt;p&gt;管道具有 &lt;code&gt;FIFO（First In First Out）&lt;/code&gt;，&lt;code&gt;FIFO&lt;/code&gt; 和排队场景一样，先排到的先获得。所以先流入管道文件的数据，也会先流出去传递给管道下游的进程。&lt;/p&gt;
&lt;h2 id=&#34;使用场景分析&#34;&gt;使用场景分析&lt;/h2&gt;
&lt;p&gt;接下来我们以多个场景举例帮助你深入学习管道。&lt;/p&gt;
&lt;h2 id=&#34;排序&#34;&gt;排序&lt;/h2&gt;
&lt;p&gt;比如我们用ls，希望按照文件名排序倒序，可以使用匿名管道，将ls的结果传递给sort指令去排序。你看，这样ls的开发者就不用关心排序问题了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/49.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;去重&#34;&gt;去重&lt;/h2&gt;
&lt;p&gt;另一个比较常见的场景是去重，比如有一个字典文件，里面都是词语。如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Apple

Banana

Apple

Banana

……

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们想要去重可以使用&lt;code&gt;uniq&lt;/code&gt;指令，&lt;code&gt;uniq&lt;/code&gt;指令能够找到文件中相邻的重复行，然后去重。但是我们上面的文件重复行是交替的，所以不可以直接用&lt;code&gt;uniq&lt;/code&gt;，因此可以先&lt;code&gt;sort&lt;/code&gt;这个文件，然后利用管道将&lt;code&gt;sort&lt;/code&gt;的结果重定向到&lt;code&gt;uniq&lt;/code&gt;指令。指令如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/50.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;筛选&#34;&gt;筛选&lt;/h2&gt;
&lt;p&gt;有时候我们想根据正则模式筛选对应的内容。比如说我们想找到项目文件下所有文件名中含有&lt;code&gt;Spring&lt;/code&gt;的文件。就可以利用&lt;code&gt;grep&lt;/code&gt;指令，操作如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find ./ | grep Spring
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;find ./&lt;/code&gt;递归列出当前目录下所有目录中的文件。&lt;code&gt;grep&lt;/code&gt;从&lt;code&gt;find&lt;/code&gt;的输出流中找出含有&lt;code&gt;Spring&lt;/code&gt;关键字的行。&lt;/p&gt;
&lt;p&gt;如果我们希望包含&lt;code&gt;Spring&lt;/code&gt;但不包含&lt;code&gt;MyBatis&lt;/code&gt;就可以这样操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find ./ | grep Spring | grep -v MyBatis
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;grep -v&lt;/code&gt;是匹配不包含 MyBatis 的结果。&lt;/p&gt;
&lt;h2 id=&#34;数行数&#34;&gt;数行数&lt;/h2&gt;
&lt;p&gt;还有一个比较常见的场景是数行数。比如你写了一个 Java 文件想知道里面有多少行，就可以使用&lt;code&gt;wc -l&lt;/code&gt;指令，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/51.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是如果你想知道当前目录下有多少个文件，可以用ls | wc -l，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/52.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;接下来请你思考一个问题：我们如何知道当前java的项目目录下有多少行代码？&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;提示一下。你可以使用下面这个指令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find -i &amp;quot;.java&amp;quot; ./ | wc -l  
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;中间结果&#34;&gt;中间结果&lt;/h2&gt;
&lt;p&gt;管道一个接着一个，是一个计算逻辑。有时候我们想要把中间的结果保存下来，这就需要用到&lt;code&gt;tee&lt;/code&gt;指令。&lt;code&gt;tee指令从标准输入流中读取数据到标准输出流。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这时候，你可能会问： 老师， 这不是什么都没做吗？&lt;/p&gt;
&lt;p&gt;别急，&lt;code&gt;tee&lt;/code&gt;还有一个能力，就是自己利用这个过程把输入流中读取到的数据存到文件中。比如下面这条指令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find ./ -i &amp;quot;*.java&amp;quot; | tee JavaList | grep Spring
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这句指令的意思是从当前目录中找到所有含有 Spring 关键字的 Java 文件。tee 本身不影响指令的执行，但是 tee 会把 find 指令的结果保存到 JavaList 文件中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tee&lt;/code&gt;这个执行就像英文字母中的 &lt;code&gt;T&lt;/code&gt; 一样，连通管道两端，下面又开了口。这个开口，在函数式编程里面叫作副作用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xargs&lt;/code&gt;&lt;br /&gt;
上面我们学习的内容难度，已经由小学 1 年级攀升到了小学 6 年级，最后我们来看看初中难度的&lt;code&gt;xargs&lt;/code&gt;指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;xargs&lt;/code&gt;指令从标准数据流中构造并执行一行行的指令。&lt;code&gt;xargs&lt;/code&gt;从输入流获取字符串，然后利用空白、换行符等切割字符串，在这些字符串的基础上构造指令，最后一行行执行这些指令。&lt;/p&gt;
&lt;p&gt;举个例子，如果我们重命名当前目录下的所有 .a 的文件，想在这些文件前面加一个前缀&lt;code&gt;prefix_&lt;/code&gt;。比如说x.a文件需要重命名成&lt;code&gt;prefix_x.a&lt;/code&gt;，我们就可以用&lt;code&gt;xargs&lt;/code&gt;指令构造模块化的指令。&lt;/p&gt;
&lt;p&gt;现在我们有&lt;code&gt;x.a y.a z.a&lt;/code&gt;三个文件，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/53.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后使用下图中的指令构造我们需要的指令：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/54.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们用&lt;code&gt;ls&lt;/code&gt;找到所有的文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-I&lt;/code&gt;参数是查找替换符，这里我们用&lt;code&gt;GG&lt;/code&gt;替代&lt;code&gt;ls&lt;/code&gt;找到的结果；&lt;code&gt;-I GG&lt;/code&gt;后面的字符串 &lt;code&gt;GG&lt;/code&gt; 会被替换为&lt;code&gt;x.a,x.b或x.z&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;echo&lt;/code&gt;是一个在命令行打印字符串的指令。使用&lt;code&gt;echo&lt;/code&gt;主要是为了安全，帮助我们检查指令是否有错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们用&lt;code&gt;xargs&lt;/code&gt;构造了 3 条指令。这里我再多讲一个词，叫作样板代码。如果你没有用&lt;code&gt;xargs&lt;/code&gt;指令，而是用一条条&lt;code&gt;mv&lt;/code&gt;指令去敲，这样就构成了样板代码。&lt;/p&gt;
&lt;p&gt;最后去掉 &lt;code&gt;echo&lt;/code&gt;，就是我们想要的结果，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/55.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;管道文件&#34;&gt;管道文件&lt;/h2&gt;
&lt;p&gt;上面我们花了较长的一段时间讨论匿名管道，用|就可以创造和使用。匿名管道也是利用了文件系统的能力，是一种文件结构。当你学到模块六文件系统的内容，会知道匿名管道拥有一个自己的&lt;code&gt;inode&lt;/code&gt;，但不属于任何一个文件夹。&lt;/p&gt;
&lt;p&gt;还有一种管道叫作命名管道（Named Pipeline）。命名管道是要挂到文件夹中的，因此需要创建。用&lt;code&gt;mkfifo&lt;/code&gt;指令可以创建一个命名管道，下面我们来创建一个叫作&lt;code&gt;pipe1&lt;/code&gt;的命名管道，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/56.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;命名管道和匿名管道能力类似，可以连接一个输出流到另一个输入流，也是 &lt;code&gt;First In First Out&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当执行&lt;code&gt;cat pipe1&lt;/code&gt;的时候，你可以观察到，当前的终端处于等待状态。因为我们&lt;code&gt;cat pipe1&lt;/code&gt;的时候&lt;code&gt;pipe1&lt;/code&gt;中没有内容。&lt;/p&gt;
&lt;p&gt;如果这个时候我们再找一个终端去写一点东西到&lt;code&gt;pipe&lt;/code&gt;中，比如说:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;XXX&amp;quot; &amp;gt; pipe1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个时候，&lt;code&gt;cat pipe1&lt;/code&gt;就会返回，并打印出xxx，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.zhugeqing.top/images/operatingSystem/57.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们可以像上图那样演示这段程序，在&lt;code&gt;cat pipe1&lt;/code&gt;后面增加了一个&lt;code&gt;&amp;amp;&lt;/code&gt;符号。这个&lt;code&gt;&amp;amp;&lt;/code&gt;符号代表&lt;code&gt;指令在后台执行&lt;/code&gt;，不会阻塞用户继续输入。然后我们通过&lt;code&gt;echo&lt;/code&gt;指令往&lt;code&gt;pipe1&lt;/code&gt;中写入东西，接着就会看到xxx被打印出来。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;这节课我们为了学习管道，先简单接触了进程的概念，然后学习了重定向。之后我们学习了匿名管道的应用场景，匿名管道帮助我们把 Linux 指令串联起来形成很强的计算能力。特别是&lt;code&gt;xargs&lt;/code&gt;指令支持模板化的生成指令，&lt;code&gt;拓展了指令的能力&lt;/code&gt;。最后我们还学习了命名管道，命名管道让我们可以真实拿到一个管道文件，让多个程序之间可以方便地进行通信。&lt;/p&gt;
&lt;h2 id=&#34;面试题目xargs-的作用&#34;&gt;面试题目：xargs 的作用？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;【解析】 xargs 将标准输入流中的字符串分割成一条条子字符串，然后再按照我们自己想要的方式构建成一条条指令，大大拓展了 Linux 指令的能力。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;比如我们可以用来按照某种特定的方式逐个处理一个目录下所有的文件；根据一个 IP 地址列表逐个 ping 这些 IP，收集到每个 IP 地址的延迟等。&lt;/code&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>林䭽</dc:creator>
        <media:content url="https://www.zhugeqing.topimages/recommend_site/xingyouji.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>操作系统</category>
            
          
        
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>