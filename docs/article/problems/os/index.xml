<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>操作系统 on 诸葛青的编程之旅</title>
    <link>https://www.zhugeqing.top/article/problems/os/</link>
    <description>Recent content in 操作系统 on 诸葛青的编程之旅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>[备案号：湘ICP备2021009076号](https://beian.miit.gov.cn/)  ![](beian.png)[湘公网安备 43132202001066号](http://www.beian.gov.cn/)</copyright>
    <lastBuildDate>Tue, 23 Nov 2021 00:00:00 +0000</lastBuildDate>
    <sy:updatePeriod>weekly&#39;</sy:updatePeriod>
    
        <atom:link href="https://www.zhugeqing.top/article/problems/os/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>进程和线程</title>
        <link>https://www.zhugeqing.top/article/problems/os/process_thread/</link>
        <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
        
        <atom:modified>Wed, 24 Nov 2021 00:00:00 +0000</atom:modified>
        <guid>https://www.zhugeqing.top/article/problems/os/process_thread/</guid>
        <description>1. 进程与线程有什么区别 了解进程与线程——&amp;gt;进程与线程的一个简单解释 答： 调度：进程是资源管理的基本单位，线程是程序执行的基本单位 拥有资源：进程是拥有资源的一个独立单位，线程不拥有资源，只拥有一点在运行中必不可少的资源（如程序计数器,一组寄存器和栈），和同属于本进程的线程共享本进程的资源（cpu，I/O，内存等） 切换：进程上下文切换比线程上下文切换要快得多。（因为进程切换需要保存进程当前的整个环</description>
        <content:encoded>&lt;h2 id=&#34;1-进程与线程有什么区别&#34;&gt;1. 进程与线程有什么区别&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;了解进程与线程&lt;/code&gt;——&amp;gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html&#34;&gt;进程与线程的一个简单解释&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;答&#34;&gt;答：&lt;/h4&gt;
&lt;font color=SkyBlue&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调度：进程是资源管理的基本单位，线程是程序执行的基本单位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拥有资源：进程是拥有资源的一个独立单位，线程不拥有资源，只拥有一点在运行中必不可少的资源（如程序计数器,一组寄存器和栈），和同属于本进程的线程共享本进程的资源（cpu，I/O，内存等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换：进程上下文切换比线程上下文切换要快得多。（因为进程切换需要保存进程当前的整个环境的保存和被调度运行的新进程环境的设置，而线程切换只需要保存和设置少量的寄存器）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统开销：创建或撤销进程时，系统都要为之分配和回收系统资源，如内存空间，I/O设备等，操作系统所付出的开销显著大于在创建或撤销线程的开销，所以进程的切换开销也远大于线程切换的开销&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通信：线程之间的通信更方便，同一进程下的线程共享全局变量等数据，而进程之间的通信需要以进程间通信(IPC)的方式进行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程依赖于进程而存在，一个进程至少有一个线程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多线程程序只要有一个线程崩溃，整个程序就崩溃了，但多进程程序中一个进程崩溃并不会对其它进程造成影响，因为进程有自己的独立地址空间，因此多进程更加健壮&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/font&gt;
&lt;h3 id=&#34;同一进程中的线程可以共享哪些数据&#34;&gt;同一进程中的线程可以共享哪些数据？&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;展开答案&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;进程代码段&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;进程的公有数据（全局变量、静态变量...）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;进程打开的文件描述符&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;进程的当前目录&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;信号处理器/信号处理函数：对收到的信号的处理方式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;进程ID与进程组ID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;h5 id=&#34;线程独占哪些资源&#34;&gt;线程独占哪些资源？&lt;/h5&gt;
&lt;details&gt;
&lt;summary&gt;展开&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;线程ID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;一组寄存器的值&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;线程自身的栈（堆是共享的）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;错误返回码：线程可能会产生不同的错误返回码，一个线程的错误返回码不应该被其它线程修改&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;信号掩码/信号屏蔽字(Signal mask)：表示是否屏蔽/阻塞相应的信号（SIGKILL,SIGSTOP除外）&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;</content:encoded>
        <dc:creator>诸葛青</dc:creator>
        <media:content url="https://www.zhugeqing.topimages/recommend_site/xingyouji.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>操作系统题目</category>
            
          
        
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>