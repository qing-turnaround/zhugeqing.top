<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>计算机系列 on 诸葛青的编程之旅</title>
    <link>https://www.zhugeqing.top/article/computer/</link>
    <description>Recent content in 计算机系列 on 诸葛青的编程之旅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>[备案号：湘ICP备2021009076号](https://beian.miit.gov.cn/)  ![](beian.png)[湘公网安备 43132202001066号](http://www.beian.gov.cn/)</copyright>
    <lastBuildDate>Sat, 06 Mar 2021 00:00:00 +0000</lastBuildDate>
    <sy:updatePeriod>weekly&#39;</sy:updatePeriod>
    
        <atom:link href="https://www.zhugeqing.top/article/computer/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>你真的了解浮点数吗？</title>
        <link>https://www.zhugeqing.top/article/computer/float/</link>
        <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
        
        <atom:modified>Sat, 06 Mar 2021 00:00:00 +0000</atom:modified>
        <guid>https://www.zhugeqing.top/article/computer/float/</guid>
        <description>此文章借鉴于微信公众号“小林coding” Go语言之父Rob Pike大神曾吐槽：不能掌握正则表达式或浮点数就不配当码农！ You should not be permitted to write production code if you do not have an journeyman license in regular expressions or floating point math. 来看看一个有趣的问题，在编程语言中，0.1 + 0.2 == 0.3？，你认为是true还是false。 来直接看看下面代码吧（下面只展示c和golang） c golang 1 2 3 4 5 6 7 8 #include &amp;lt;stdio.h&amp;gt; int main() { int bool_num = (0.1 + 0.2 == 0.3); printf(&amp;#34;%d&amp;#34;, bool_num); return 0; } 1 2 3 4 5 6 7 8 9 10 package main import( &amp;#34;fmt&amp;#34; ) func main(){ fmt.Printf(0.1+0.2==0.3)</description>
        <content:encoded>&lt;hr /&gt;
  &lt;p style=&#34;color:#00FFFF&#34;;&gt;此文章借鉴于微信公众号“小林coding”&lt;/p&gt;
&lt;p&gt;　Go语言之父Rob Pike大神曾吐槽：不能掌握正则表达式或浮点数就不配当码农！&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34; data-dir=&#34;ltr&#34;&gt;&lt;p style=&#34;color:#00FFFF&#34;;&gt;　　You should not be permitted to write production code if you do not have an journeyman license in regular expressions or floating point math.&lt;/div&gt;
&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;来看看一个有趣的问题，在编程语言中，0.1 + 0.2 == 0.3？，你认为是true还是false。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;来直接看看下面代码吧（下面只展示c和golang）&lt;/p&gt;

&lt;div id=&#34;5cdb15baa5b4cf80&#34; class=&#34;codetab&#34;&gt;
  &lt;div class=&#34;codetab__links&#34;&gt;
    
      &lt;button class=&#34;codetab__link&#34; aria-label=&#34;Tab link&#34;&gt;c&lt;/button&gt;
    
      &lt;button class=&#34;codetab__link&#34; aria-label=&#34;Tab link&#34;&gt;golang&lt;/button&gt;
    
  &lt;/div&gt;
  
  
&lt;div id=&#34;4c08de3db1c6ae20&#34; class=&#34;codetab__content&#34;&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bool_num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bool_num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

  
&lt;div id=&#34;17b2b3e60d703ed5&#34; class=&#34;codetab__content&#34;&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  

&lt;/div&gt;

&lt;script&gt;
  &#39;use strict&#39;;

  var containerId = JSON.parse(&#34;\&#34;5cdb15baa5b4cf80\&#34;&#34;);
  var containerElem = document.getElementById(containerId);
  var codetabLinks = null;
  var codetabContents = null;
  var ids = [];

  if (containerElem) {
    codetabLinks = containerElem.querySelectorAll(&#39;.codetab__link&#39;);
    codetabContents = containerElem.querySelectorAll(&#39;.codetab__content&#39;);
  }

  for (var i = 0; i &lt; codetabContents.length; i++) {
    ids = ids.concat(codetabContents[i].getAttribute(&#39;id&#39;));
    codetabContents[i].style.display = &#39;none&#39;;

    if (0 === parseInt(i, 10) &amp;&amp; !codetabContents[i].classList.contains(&#39;active&#39;)) {
      codetabContents[i].classList.add(&#39;active&#39;);
    }
  }

  for (var i = 0; i &lt; codetabLinks.length; i++) {
    codetabLinks[i].setAttribute(&#39;id&#39;, ids[i]);

    if (0 === parseInt(i, 10) &amp;&amp; !codetabLinks[i].classList.contains(&#39;active&#39;)) {
      codetabLinks[i].classList.add(&#39;active&#39;);
    } else {
      codetabLinks[i].classList.remove(&#39;active&#39;);
    }
  }

  if (codetabContents.length &gt; 0) {
    codetabContents[0].style.display = &#39;block&#39;;
  }
&lt;/script&gt;
&lt;p&gt;结果出其所料，答案是false&lt;/p&gt;
&lt;p&gt;你可能会怀疑自己？我以前的数学老师教错了吗？或者是这计算机太蠢了吧，连这都算不清？&lt;/p&gt;
&lt;p&gt;&lt;font color=CadetBlue size=3 &gt;别急，听我一一道来&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;关于这个计算其实是两个问题了：&lt;/p&gt;
&lt;p&gt;1.我们日常或者说是人脑计算0.1+0.2，答案当然是0.3&lt;/p&gt;
&lt;p&gt;2.你把这个计算交给计算机，它得到的是0.30000000000000004（单精度）&lt;/p&gt;
&lt;p&gt;&lt;font color=CadetBlue size=3 &gt;为什么会出现这个结果呢？这就需要一定计算机知识的人才会知道。&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&#34;什么是浮点数&#34;&gt;什么是浮点数&lt;/h1&gt;
&lt;p&gt;我们知道，数学中并没有浮点数的概念，虽然小数看起来像浮点数，但从不这么叫。那为什么计算机中不叫小数而叫浮点数呢？&lt;/p&gt;
&lt;p&gt;因为资源的限制，数学中的小数无法直接在计算机中准确表示。为了更好地表示它，计算机科学家们发明了浮点数，这是对小数的近似表示。维基百科中关于浮点数的概念说明如下：&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34; data-dir=&#34;ltr&#34;&gt;&lt;p style=&#34;color:#00FFFF&#34;;&gt;The term floating point refers to the fact that a number&#39;s radix point (decimal point, or, more commonly in computers, binary point) can float; that is, it can be placed anywhere relative to the significant digits of the number.（浮点数是指一个数字的小数点(小数点,或者更常见的在电脑、二进制点)可以浮动;也就是说,它可以放置在任何地方相对于数量的有效数字。
）&lt;/div&gt;
&lt;p&gt;&lt;font color=CadetBlue size=3 &gt;具体来说，浮点数是指用符号、尾数、基数和指数这四部分来表示的小数。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;知道了浮点数的概念，但需要确定一套具体的表示、运算标准。其中最有名的就是 IEEE754 标准。William Kahan 正是因为浮点数标准化的工作获得了图灵奖。&lt;/p&gt;
&lt;p&gt;　标准中规定：&lt;/p&gt;
&lt;p&gt;&lt;font color=VioletRed size=3 &gt;float32位单精度浮点数在机器中表示用 1 位表示数字的符号，用 8 位表示指数，用 23 位表示尾数。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=VioletRed size=3 &gt;double64位双精度浮点数，用 1 位表示符号，用 11 位表示指数，52 位表示尾数。&lt;/font&gt;&lt;br /&gt;
　　　　&lt;br /&gt;
今天，我们来一步一步思考下面这些问题，然后最后再来说说为什么计算机里 0.1 + 0.2 != 0.3。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么负数要用补码表示？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十进制小数怎么转成二进制？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算机是怎么存小数的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0.1 + 0.2 == 0.3 吗？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;别看这些问题都看似简单，但是其实还是有点东西。&lt;/p&gt;
&lt;h2 id=&#34;为什么负数要用补码表示&#34;&gt;为什么负数要用补码表示？&lt;/h2&gt;
&lt;p&gt;十进制转换二进制的方法相信大家都熟能生巧了，如果你说你还不知道，我觉得你还是太谦虚，可能你只是忘记了，即使你真的忘记了，不怕，让我们一起来重新回顾一下&lt;/p&gt;
&lt;p&gt;十进制数转二进制采用的是&lt;font color=Aqua size=3 &gt;除 2 取余法&lt;/font&gt;，比如数字 8 转二进制的过程如下图：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float2.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;接着，我们看看「整数类型」的数字在计算机的存储方式，这其实很简单，也很直观，就是将十进制的数字转换成二进制即可。&lt;/p&gt;
&lt;p&gt;我们以 &lt;font color=GreenYellow size=3 &gt;int&lt;/font&gt; 类型的数字作为例子，int 类型是 &lt;font color=GreenYellow size=3 &gt;32&lt;/font&gt; 位的，其中&lt;font color=Aqua size=3 &gt;最高位是作为「符号标志位」&lt;/font&gt;，正数的符号位是 &lt;font color=GreenYellow size=3 &gt;0&lt;/font&gt;，负数的符号位是 &lt;font color=GreenYellow size=3 &gt;1&lt;/font&gt;，&lt;font color=Aqua size=3 &gt;剩余的 31 位则表示二进制数据&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;那么，对于 int 类型的数字 1 的二进制数表示如下：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float3.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;而负数就比较特殊了点，负数在计算机中是以「补码」表示的，&lt;font color=Aqua size=3 &gt;所谓的补码就是把正数的二进制全部取反再加 1&lt;/font&gt;，比如 -1 的二进制是把数字 1 的二进制取反后再加 1，如下图：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float4.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;不知道你有没有想过，为什么计算机要用补码的方式来表示负数？在回答这个问题前，我们假设不用补码的方式来表示负数，而只是把最高位的符号标志位变为 1 表示负数，如下图过程：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float5.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;如果采用这种方式来表示负数的二进制的话，试想一下 &lt;font color=MediumVioletRed size=3 &gt;-2 + 1&lt;/font&gt; 的运算过程，如下图：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float6.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;按道理，&lt;font color=MediumVioletRed size=3 &gt;-2 + 1 = -1&lt;/font&gt;，但是上面的运算过程中得到结果却是 &lt;font color=MediumVioletRed size=3 &gt;-3&lt;/font&gt;，所可以发现，这种负数的表示方式是不能用常规的加法来计算了，就需要特殊处理，要先判断数字是否为负数，如果是负数就要把加法操作变成减法操作才可以得到正确对结果。&lt;/p&gt;
&lt;p&gt;到这里，我们就可以回答前面提到的「负数为什么要用补码方式来表示」的问题了。&lt;/p&gt;
&lt;p&gt;如果负数不是使用补码的方式表示，则在做基本对加减法运算的时候，&lt;font color=Aqua size=3 &gt;还需要多一步操作来判断是否为负数，如果为负数，还得把加法反转成减法，或者把减法反转成加法&lt;/font&gt;，这就非常不好了，毕竟加减法运算在计算机里是很常使用的，所以为了性能考虑，应该要尽量简化这个运算过程。&lt;/p&gt;
&lt;p&gt;&lt;font color=Aqua size=3 &gt;而用了补码的表示方式，对于负数的加减法操作，实际上是和正数加减法操作一样的&lt;/font&gt;。你可以看到下图，用补码表示的负数在运算 -2 + 1 过程的时候，其结果是正确的：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float7.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;十进制小数与二进制的转换&#34;&gt;十进制小数与二进制的转换&lt;/h2&gt;
&lt;p&gt;好了，整数十进制转二进制我们知道了，接下来看看小数是怎么转二进制的，小数部分的转换不同于整数部分，它采用的是&lt;font color=Aqua size=3 &gt;乘 2 取整法&lt;/font&gt;，将十进制中的小数部分乘以 2 作为二进制的一位，然后继续取小数部分乘以 2 作为下一位，直到不存在小数为止。&lt;/p&gt;
&lt;p&gt;话不多说，我们就以 &lt;font color=MediumVioletRed size=3 &gt;8.625&lt;/font&gt;转二进制作为例子，直接上图：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float8.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;最后把「整数部分 + 小数部分」结合在一起后，其结果就是 &lt;font color=MediumVioletRed size=3 &gt;1000.101&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;但是，并不是所有小数都可以用二进制表示，前面提到的 0.625 小数是一个特例，刚好通过乘 2 取整法的方式完整的转换成二进制。&lt;/p&gt;
&lt;p&gt;如果我们用相同的方式，来把 &lt;font color=MediumVioletRed size=3 &gt;0.1&lt;/font&gt; 转换成二进制，过程如下：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float9.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;可以发现，0.1 的二进制表示是无限循环的。&lt;/p&gt;
&lt;p&gt;&lt;font color=Aqua size=3 &gt;由于计算机的资源是有限的，所以是没办法用二进制精确的表示 0.1，只能用「近似值」来表示，就是在有限的精度情况下，最大化接近 0.1 的二进制数，于是就会造成精度缺失的情况。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;对于二进制小数转十进制时，需要注意一点，小数点后面的指数幂是&lt;font color=Aqua size=3 &gt;负数&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;比如，二进制 &lt;font color=MediumVioletRed size=3 &gt;0.1&lt;/font&gt; 转成十进制就是 &lt;font color=MediumVioletRed size=3 &gt;2^(-1)&lt;/font&gt;，也就是十进制 &lt;font color=MediumVioletRed size=3 &gt;0.5&lt;/font&gt;，二进制 &lt;font color=MediumVioletRed size=3 &gt;0.01&lt;/font&gt;转成十进制就是 &lt;font color=MediumVioletRed size=3 &gt;2^-2&lt;/font&gt;，也就是十进制 &lt;font color=MediumVioletRed size=3 &gt;0.25&lt;/font&gt;，以此类推。&lt;/p&gt;
&lt;p&gt;举个例子，二进制 &lt;font color=MediumVioletRed size=3 &gt;1010.101&lt;/font&gt; 转十进制的过程，如下图：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float10.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;计算机是怎么存小数的&#34;&gt;计算机是怎么存小数的？&lt;/h2&gt;
&lt;p&gt;&lt;font color=MediumVioletRed size=3 &gt;1000.101&lt;/font&gt; 这种二进制小数是「定点数」形式，代表着小数点是定死的，不能移动，如果你移动了它的小数点，这个数就变了， 就不再是它原来的值了。&lt;/p&gt;
&lt;p&gt;然而，计算机并不是这样存储的小数的，计算机存储小数的采用的是&lt;font color=Aqua size=3 &gt;浮点数&lt;/font&gt;，名字里的「浮点」表示小数点是可以浮动的。&lt;/p&gt;
&lt;p&gt;比如 &lt;font color=MediumVioletRed size=3 &gt;1000.101&lt;/font&gt; 这个二进制数，可以表示成 &lt;font color=MediumVioletRed size=3 &gt;1.000101 x 2^3&lt;/font&gt;，类似于数学上的科学记数法。&lt;/p&gt;
&lt;p&gt;既然提到了科学计数法，我再帮大家复习一下。&lt;/p&gt;
&lt;p&gt;比如有个很大的十进制数 1230000，我们可以也可以表示成 &lt;font color=MediumVioletRed size=3 &gt;1.23 x 10^6&lt;/font&gt;，这种方式就称为科学记数法。&lt;/p&gt;
&lt;p&gt;该方法在小数点左边只有一个数字，而且把这种整数部分没有前导 0 的数字称为&lt;font color=Aqua size=3 &gt;规格化&lt;/font&gt;，比如 &lt;font color=MediumVioletRed size=3 &gt;1.0 x 10^(-9)&lt;/font&gt; 是规格化的科学记数法，而 &lt;font color=MediumVioletRed size=3 &gt;0.1 x 10^(-9)&lt;/font&gt; 和 &lt;font color=MediumVioletRed size=3 &gt;10.0 x 10^(-9)&lt;/font&gt; 就不是了。&lt;/p&gt;
&lt;p&gt;因此，如果二进制要用到科学记数法，同时要规范化，那么不仅要保证基数为 2，还要保证小数点左侧只有 1 位，而且必须为 1。&lt;/p&gt;
&lt;p&gt;所以通常将 &lt;font color=MediumVioletRed size=3 &gt;1000.101&lt;/font&gt; 这种二进制数，规格化表示成 &lt;font color=MediumVioletRed size=3 &gt;1.000101 x 2^3&lt;/font&gt;，其中，最为关键的是 000101 和 3 这两个东西，它就可以包含了这个二进制小数的所有信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=MediumVioletRed size=3 &gt;000101&lt;/font&gt; 称为&lt;font color=Aqua size=3 &gt;尾数&lt;/font&gt;，即小数点后面的数字；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=MediumVioletRed size=3 &gt;3 &lt;/font&gt;称为&lt;font color=Aqua size=3 &gt;指数&lt;/font&gt;，指定了小数点在数据中的位置；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在绝大多数计算机使用的浮点数，一般采用的是 IEEE 制定的国际标准，这种标准形式如下图：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float11.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;这三个重要部分的意义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;符号位&lt;/font&gt;：表示数字是正数还是负数，为 0 表示正数，为 1 表示负数；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;指数位&lt;/font&gt;：指定了小数点在数据中的位置，指数可以是负数，也可以是正数，&lt;font color=Aqua size=3 &gt;指数位的长度越长则数值的表达范围就越大&lt;/font&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;尾数位&lt;/font&gt;：小数点右侧的数字，也就是小数部分，比如二进制 1.0011 x 2^(-2)，尾数部分就是 0011，而且&lt;font color=Aqua size=3 &gt;尾数的长度决定了这个数的精度&lt;/font&gt;，因此如果要表示精度更高的小数，则就要提高尾数位的长度；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用 &lt;font color=VioletRed size=3 &gt;32&lt;/font&gt; 位来表示的浮点数，则称为&lt;font color=Aqua size=3 &gt;单精度浮点数&lt;/font&gt;，也就是我们编程语言中的 &lt;font color=VioletRed size=3 &gt;float&lt;/font&gt; 变量，而用 &lt;font color=VioletRed size=3 &gt;64&lt;/font&gt; 位来表示的浮点数，称为&lt;font color=Aqua size=3 &gt;双精度浮点数&lt;/font&gt;，也就是 &lt;font color=VioletRed size=3 &gt;double&lt;/font&gt;  变量，它们的结构如下：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float12.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;可以看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;double 的尾数部分是 52 位，float 的尾数部分是 23 位，由于同时都带有一个固定隐含位（这个后面会说），所以 double 有 53 个二进制有效位，float 有 24 个二进制有效位，所以所以它们的精度在十进制中分别是 &lt;font color=MediumVioletRed size=3 &gt;log10(2^53)&lt;/font&gt;约等于 &lt;font color=MediumVioletRed size=3 &gt;15.95&lt;/font&gt;和 &lt;font color=MediumVioletRed size=3 &gt;log10(2^24)&lt;/font&gt;约等于 &lt;font color=MediumVioletRed size=3 &gt;7.22 &lt;/font&gt;位，因此 double 的有效数字是 &lt;font color=MediumVioletRed size=3 &gt;15~16 &lt;/font&gt;位，float 的有效数字是 &lt;font color=MediumVioletRed size=3 &gt;7~8 &lt;/font&gt;位，这些是有效位是包含整数部分和小数部分；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;double 的指数部分是 11 位，而 float 的指数位是 8 位，意味着 double 相比 float 能表示更大的数值范围；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那二进制小数，是如何转换成二进制浮点数的呢？&lt;/p&gt;
&lt;p&gt;我们就以 &lt;font color=MediumVioletRed size=3 &gt;10.625&lt;/font&gt;作为例子，看看这个数字在 float 里是如何存储的。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float13.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;首先，我们计算出 10.625 的二进制小数为 1010.101。&lt;/p&gt;
&lt;p&gt;然后&lt;font color=Aqua size=3 &gt;把小数点，移动到第一个有效数字后面&lt;/font&gt;，即将 1010.101 右移 &lt;font color=MediumVioletRed size=3 &gt;3&lt;/font&gt; 位成 &lt;font color=MediumVioletRed size=3 &gt;1.010101&lt;/font&gt;，右移 3 位就代表 +3，左移 3 位就是 -3。&lt;/p&gt;
&lt;p&gt;&lt;font color=Aqua size=3 &gt;float 中的「指数位」就跟这里移动的位数有关系，把移动的位数再加上「偏移量」，float 的话偏移量是 127，相加后就是指数位的值了&lt;/font&gt;，即指数位这 8 位存的是 &lt;font color=MediumVioletRed size=3 &gt;10000010&lt;/font&gt;（十进制 130），因此你可以认为「指数位」相当于指明了小数点在数据中的位置。&lt;/p&gt;
&lt;p&gt;&lt;font color=MediumVioletRed size=3 &gt;1.010101&lt;/font&gt; 这个数的&lt;font color=Aqua size=3 &gt;小数点右侧的数字就是 float 里的「尾数位」&lt;/font&gt;，由于尾数位是 23 位，则后面要补充 0，所以最终尾数位存储的数字是 &lt;font color=MediumVioletRed size=3 &gt;01010100000000000000000&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;在算指数的时候，你可能会有疑问为什么要加上偏移量呢？&lt;/p&gt;
&lt;p&gt;前面也提到，指数可能是正数，也可能是负数，即指数是有符号的整数，而有符号整数的计算是比无符号整数麻烦的，所以为了减少不必要的麻烦，在实际存储指数的时候，需要把指数转换成&lt;font color=Aqua size=3 &gt;无符号整数&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;float 的指数部分是 8 位，IEEE 标准规定单精度浮点的指数取值范围是 &lt;font color=MediumVioletRed size=3 &gt;-126 ~ +127&lt;/font&gt;，于是为了把指数转换成无符号整数，就要加个&lt;font color=Aqua size=3 &gt;偏移量&lt;/font&gt;，比如 float 的指数偏移量是 &lt;font color=MediumVioletRed size=3 &gt;127&lt;/font&gt;，这样指数就不会出现负数了。&lt;/p&gt;
&lt;p&gt;比如，指数如果是 8，则实际存储的指数是 8 + 127（偏移量）= 135，即把 135 转换为二进制之后再存储，而当我们需要计算实际的十进制数的时候，再把指数减去「偏移量」即可。&lt;/p&gt;
&lt;p&gt;细心的朋友肯定发现，移动后的小数点左侧的有效位（即 1）消失了，它并没有存储到 float 里。&lt;/p&gt;
&lt;p&gt;这是因为 IEEE 标准规定，二进制浮点数的小数点左侧只能有 1 位，并且还只能是 1，&lt;font color=Aqua size=3 &gt;既然这一位永远都是 1，那就可以不用存起来了&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;于是就让 23 位尾数只存储小数部分，然后在计算时会&lt;font color=Aqua size=3 &gt;自动把这个 1 加上，这样就可以节约 1 位的空间，尾数就能多存一位小数，相应的精度就更高了一点&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;那么，对于我们在从 float 的二进制浮点数转换成十进制时，要考虑到这个隐含的 1，转换公式如下：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float14.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;举个例子，我们把下图这个 float 的数据转换成十进制，过程如下：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float15.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;01--02--03-&#34;&gt;0.1 + 0.2 == 0.3 ?&lt;/h2&gt;
&lt;p&gt;前面提到过，并不是所有小数都可以用「完整」的二进制来表示的，比如十进制 0.1 在转换成二进制小数的时候，是一串无限循环的二进制数，计算机是无法表达无限循环的二进制数的，毕竟计算机的资源是有限。&lt;/p&gt;
&lt;p&gt;因此，计算机只能用「近似值」来表示该二进制，那么意味着计算机存放的小数可能不是一个真实值。&lt;/p&gt;
&lt;p&gt;现在基本都是用  IEEE 754 规范的「单精度浮点类型」或「双精度浮点类型」来存储小数的，根据精度的不同，近似值也会不同。&lt;/p&gt;
&lt;p&gt;那计算机是存储 0.1 是一个怎么样的二进制浮点数呢？&lt;/p&gt;
&lt;p&gt;偷个懒，我就不自己手动算了，可以使用 &lt;a href=&#34;https://baseconvert.com/&#34;&gt;baseconvert&lt;/a&gt; 这个工具，将十进制 0.1 小数转换成 float 浮点数：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float16.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;可以看到，8 位指数部分是 &lt;font color=MediumVioletRed size=3 &gt;01111011&lt;/font&gt;，23 位的尾数部分是 &lt;font color=MediumVioletRed size=3 &gt;10011001100110011001101&lt;/font&gt;，可以看到尾数部分是 0011 是一直循环的，只不过尾数是有长度限制的，所以只会显示一部分，所以是一个近似值，精度十分有限。&lt;/p&gt;
&lt;p&gt;接下来，我们看看 0.2 的 float 浮点数：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float17.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;可以看到，8 位指数部分是 &lt;font color=MediumVioletRed size=3 &gt;01111100&lt;/font&gt;，稍微和 0.1 的指数不同，23 位的尾数部分是 &lt;font color=MediumVioletRed size=3 &gt;10011001100110011001101&lt;/font&gt;和 0.1 的尾数部分是相同的，也是一个近似值。&lt;/p&gt;
&lt;p&gt;&lt;font color=MediumVioletRed size=3 &gt;0.1&lt;/font&gt;的二进制浮点数转换成十进制的结果是 &lt;font color=MediumVioletRed size=3 &gt;0.100000001490116119384765625&lt;/font&gt;：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/float18.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=MediumVioletRed size=3 &gt;0.2 &lt;/font&gt;的二进制浮点数转换成十进制的结果是 &lt;font color=MediumVioletRed size=3 &gt;0.20000000298023223876953125&lt;/font&gt;：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/640.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;这两个结果相加就是 &lt;font color=MediumVioletRed size=3 &gt;0.300000004470348358154296875&lt;/font&gt;：&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/float/641.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;font color=GreenYellow size=3 &gt;   &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;所以，你会看到在计算机中 &lt;font color=Aqua size=3 &gt;0.1 + 0.2 并不等于完整的 0.3&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;这主要是&lt;font color=Aqua size=3 &gt;因为有的小数无法可以用「完整」的二进制来表示，所以计算机里只能采用近似数的方式来保存，那两个近似数相加，得到的必然也是一个近似数&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34; data-dir=&#34;ltr&#34;&gt;&lt;p style=&#34;color:#00FFFF&#34;;&gt;为什么负数要用补码表示？&lt;/div&gt;
&lt;p&gt;负数之所以用补码的方式来表示，主要是为了统一和正数的加减法操作一样，毕竟数字的加减法是很常用的一个操作，就不要搞特殊化，尽量以统一的方式来运算。&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34; data-dir=&#34;ltr&#34;&gt;&lt;p style=&#34;color:#00FFFF&#34;;&gt;十进制小数怎么转成二进制？&lt;/div&gt;
&lt;p&gt;十进制整数转二进制使用的是「除 2 取余法」，十进制小数使用的是「乘 2 取整法」。&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34; data-dir=&#34;ltr&#34;&gt;&lt;p style=&#34;color:#00FFFF&#34;;&gt;计算机是怎么存小数的？&lt;/div&gt;
&lt;p&gt;计算机是以浮点数的形式存储小数的，大多数计算机都是 IEEE 754 标准定义的浮点数格式，包含三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;符号位：表示数字是正数还是负数，为 0 表示正数，为 1 表示负数；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指数位：指定了小数点在数据中的位置，指数可以是负数，也可以是正数，指数位的长度越长则数值的表达范围就越大；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尾数位：小数点右侧的数字，也就是小数部分，比如二进制 1.0011 x 2^(-2)，尾数部分就是 0011，而且尾数的长度决定了这个数的精度，因此如果要表示精度更高的小数，则就要提高尾数位的长度；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用 32 位来表示的浮点数，则称为单精度浮点数，也就是我们编程语言中的 float 变量，而用 64 位来表示的浮点数，称为双精度浮点数，也就是 double 变量。&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34; data-dir=&#34;ltr&#34;&gt;&lt;p style=&#34;color:#00FFFF&#34;;&gt;0.1 + 0.2 == 0.3 吗？&lt;/div&gt;
&lt;p&gt;不是的，0.1 和 0.2 这两个数字用二进制表达会是一个一直循环的二进制数，比如 0.1 的二进制表示为 0.0 0011 0011 0011… （0011 无限循环)，对于计算机而言，0.1 无法精确表达，这是浮点数计算造成精度损失的根源。&lt;/p&gt;
&lt;p&gt;因此，IEEE 754 标准定义的浮点数只能根据精度舍入，然后用「近似值」来表示该二进制，那么意味着计算机存放的小数可能不是一个真实值。&lt;/p&gt;
&lt;p&gt;0.1 + 0.2 并不等于完整的 0.3，这主要是因为这两个小数无法用「完整」的二进制来表示，只能根据精度舍入，所以计算机里只能采用近似数的方式来保存，那两个近似数相加，得到的必然也是一个近似数。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;font color=Aqua size=3 &gt;学到的伙计顺便教一下身边的朋友吧（没学到的再看一遍）&lt;/font&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>诸葛青</dc:creator>
        <media:content url="https://www.zhugeqing.top/images/xingyouji.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>计算机</category>
            
          
        
        
        
          
            
          
        
      </item>
      
      <item>
        <title>硬盘到底是什么！</title>
        <link>https://www.zhugeqing.top/article/computer/hard_disk/</link>
        <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
        
        <atom:modified>Fri, 06 Mar 2020 00:00:00 +0000</atom:modified>
        <guid>https://www.zhugeqing.top/article/computer/hard_disk/</guid>
        <description>历史上，有多种辅助存储设备，比如软盘、光盘、硬盘、U 盘等，相对于内存，它们就是人们常说的“外存”，即外存储器（设备）。 从软盘（Floppy Disk）启动计算机，这已经是过去的事了。软盘的尺寸比烟盒稍大一点，但是比较薄，采用塑料作为基片，上面是一层磁性物质，可以用来记录二进制位。这种塑料介质比较柔软，所以称为软盘。 在数据记录原理上和软盘很相似的设备是硬盘（Hard Disk，HDD），而且它们几乎是同</description>
        <content:encoded>&lt;p&gt;历史上，有多种辅助存储设备，比如软盘、光盘、硬盘、U 盘等，相对于内存，它们就是人们常说的“外存”，即外存储器（设备）。&lt;br /&gt;
从软盘（Floppy Disk）启动计算机，这已经是过去的事了。软盘的尺寸比烟盒稍大一点，但是比较薄，采用塑料作为基片，上面是一层磁性物质，可以用来记录二进制位。这种塑料介质比较柔软，所以称为软盘。&lt;br /&gt;
在数据记录原理上和软盘很相似的设备是硬盘（Hard Disk，HDD），而且它们几乎是同一个时代的产物。但是，与软盘不同，硬盘是多盘片、密封、高转速的，采用铝合金作为基片，并在表面涂上磁性物质来记录二进制位。这就使得它的盘片具有较高的硬度，故称为硬盘。&lt;br /&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/article/disk.png&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                        图1-1   一块被拆开密封盖的硬盘
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如图1-1 所示，这是一块被拆开的硬盘，中间是用于记录数据的铝合金盘片，固定在中心的轴上，由一个高速旋转的马达驱动。附着在盘片表面的扁平锥状物，就是用于在盘片上读写数据的磁头。&lt;/p&gt;
&lt;p&gt;为了进一步搞清楚硬盘的内部构造，图1-2 给出了更为详细的图示。&lt;br /&gt;
硬盘可以只有一个盘片（这称为单碟），也可能有好几个盘片。但无论如何，它们都串在同一个轴上，由电动机带动着一起高速旋转。一般来说，转速可以达到每分钟3600 转或者7200转，有的能达到一万多转，这个参数就是我们常说的“转/分钟”（Round Per Minute，RPM）。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/article/disk_in.png&#34;/&gt; 
&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;                        图1-2 硬盘的结构示意图
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每个盘片都有两个磁头（Head），上面一个，下面一个，所以经常用磁头来指代盘面。磁头都有编号，第1 个盘片，上面的磁头编号为0，下面的磁头编号为1；第2 个盘片，上面的磁头编号为2，下面的磁头编号为3，以此类推。&lt;br /&gt;
每个磁头不是单独移动的。相反，它们都通过磁头臂固定在同一个支架上，由步进电动机带动着一起在盘片的中心和边缘之间来回移动。也就是说，它们是同进退的。步进电动机由脉冲驱动，每次可以旋转一个固定的角度，即可以步进一次。&lt;br /&gt;
可以想象，当盘片高速旋转时，磁头每步进一次，都会从它所在的位置开始，绕着圆心“画”出一个看不见的圆圈，这就是磁道（Track）。磁道是数据记录的轨迹。因为所有磁头都是联动的，故每个盘面上的同一条磁道又可以形成一个虚拟的圆柱，称为柱面（Cylinder）。&lt;br /&gt;
磁道，或者柱面，也要编号。编号是从盘面最边缘的那条磁道开始，向着圆心的方向，从0开始编号。&lt;br /&gt;
柱面是一个用来优化数据读写的概念。初看起来，用硬盘来记录数据时，应该先将一个盘面填满后，再填写另一个盘面。实际上，移动磁头是一个机械动作，看似很快，但对处理器来说，却很后，再填写另一个盘面。实际上，移动磁头是一个机械动作，看似很快，但对处理器来说，却很漫长，这就是寻道时间。为了加速数据在硬盘上的读写，最好的办法就是尽量不移动磁头。这样，当0 面的磁道不足以容纳要写入的数据时，应当把剩余的部分写在1 面的同一磁道上。如果还写不下，那就继续把剩余的部分写在2 面的同一磁道上。换句话说，在硬盘上，数据的访问是以柱面来组织的。&lt;br /&gt;
实际上，磁道还不是硬盘数据读写的最小单位，磁道还要进一步划分为扇区（Sector）。磁道很窄，也看不见，但在想象中，它仍呈带状，占有一定的宽度。将它划分许多分段之后，每一部分都呈扇形，这就是扇区的由来。&lt;br /&gt;
每条磁道能够划分为几个扇区，取决于磁盘的制造者，但通常为63 个。而且，每个扇区都有一个编号，与磁头和磁道不同，扇区的编号是从1 开始的。&lt;br /&gt;
扇区与扇区之间以间隙（空白）间隔开来，每个扇区以扇区头开始，然后是512 个字节的数据区。扇区头包含了每个扇区自己的信息，主要有本扇区的磁道号、磁头号和扇区号，用来供硬盘定位机构使用。现代的硬盘还会在扇区头部包括一个指示扇区是否健康的标志，以及用来替换该扇区的扇区地址。用于替换扇区的，是一些保留和隐藏的磁道。&lt;/p&gt;
</content:encoded>
        <dc:creator>诸葛青的编程之旅</dc:creator>
        <media:content url="https://www.zhugeqing.top/images/xingyouji.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
        
        
      </item>
      

    
  </channel>
</rss>