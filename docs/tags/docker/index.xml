<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>docker on 诸葛青的编程之旅</title>
    <link>https://www.zhugeqing.top/tags/docker/</link>
    <description>Recent content in docker on 诸葛青的编程之旅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>[备案号：湘ICP备2021009076号](https://beian.miit.gov.cn/)  ![](beian.png)[湘公网安备 43132202001066号](http://www.beian.gov.cn/)</copyright>
    <lastBuildDate>Thu, 17 Mar 2022 00:00:00 +0000</lastBuildDate>
    <sy:updatePeriod>weekly&#39;</sy:updatePeriod>
    
        <atom:link href="https://www.zhugeqing.top/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Docker compose</title>
        <link>https://www.zhugeqing.top/docker/6/</link>
        <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
        
        <atom:modified>Thu, 17 Mar 2022 00:00:00 +0000</atom:modified>
        <guid>https://www.zhugeqing.top/docker/6/</guid>
        <description>docker-compose的安装 curl -L &amp;quot;https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)&amp;quot; -o /usr/local/bin/docker-compose chmod 744 /usr/local/bin/docker-compose 赋予命令执行权限 docker-compose --version 测试是否安装成功 compose 文件的结构 docker compose文件的语法说明 https://docs.docker.com/compose/compose-file/</description>
        <content:encoded>&lt;h2 id=&#34;docker-compose的安装&#34;&gt;docker-compose的安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl -L &amp;quot;https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)&amp;quot; -o /usr/local/bin/docker-compose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod 744 /usr/local/bin/docker-compose&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;赋予命令执行权限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker-compose --version&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;测试是否安装成功&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;compose-文件的结构&#34;&gt;compose 文件的结构&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;docker compose文件的语法说明 &lt;a href=&#34;https://docs.docker.com/compose/compose-file/&#34;&gt;https://docs.docker.com/compose/compose-file/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;</content:encoded>
        <dc:creator>诸葛青</dc:creator>
        <media:content url="https://www.zhugeqing.topimages/docker.svg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>docker</category>
            
          
        
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Docker network</title>
        <link>https://www.zhugeqing.top/docker/5/</link>
        <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
        
        <atom:modified>Thu, 17 Mar 2022 00:00:00 +0000</atom:modified>
        <guid>https://www.zhugeqing.top/docker/5/</guid>
        <description>docker network基础 docker 网络分为bridge，host，none三种 [root@zhugeqing ~]# docker network ls NETWORK ID NAME DRIVER SCOPE 23bfb9b413e1 bridge bridge local da3b8a887179 host host local 8124818e6997 none null local 默认情况下，创建的container会连接到bridge上 [root@zhugeqing ~]# docker container run -d --rm --name linux1 ubuntu:21.04 /bin/sh -c &amp;quot;while true; do sleep 3600; done&amp;quot; fb99caa72e20a4d0a86aa83840fe328e5dca179fc9dd0d59b9ecc4d2a9255e47 [root@zhugeqing ~]# docker container run -d --rm --name linux2 ubuntu:21.04 /bin/sh -c &amp;quot;while true; do sleep 3600; done&amp;quot; 07eab1fef9bb88386ffacd7a0a040c40a2d854daec50e5c818115d3a51bfaf3e [root@zhugeqing ~]# docker network inspect bridge &amp;quot;Containers&amp;quot;: { &amp;quot;fb99caa72e20a4d0a86aa83840fe328e5dca179fc9dd0d59b9ecc4d2a9255e47&amp;quot;: { &amp;quot;Name&amp;quot;: &amp;quot;linux1&amp;quot;, &amp;quot;EndpointID&amp;quot;: &amp;quot;4ab7071e9308743a20f22ed450dde0b1acc84803019e0963149b2a1b852efb60&amp;quot;, &amp;quot;MacAddress&amp;quot;: &amp;quot;02:42:ac:11:00:06&amp;quot;, &amp;quot;IPv4Address&amp;quot;: &amp;quot;172.17.0.6/16&amp;quot;, &amp;quot;IPv6Address&amp;quot;: &amp;quot;&amp;quot; } &amp;quot;07eab1fef9bb88386ffacd7a0a040c40a2d854daec50e5c818115d3a51bfaf3e&amp;quot;: { &amp;quot;Name&amp;quot;: &amp;quot;linux2&amp;quot;, &amp;quot;EndpointID&amp;quot;: &amp;quot;e86202bc76dd0d226f8f188434b6289c96b2dd648d950b0fcc7ecb2e73c78a3d&amp;quot;, &amp;quot;MacAddress&amp;quot;: &amp;quot;02:42:ac:11:00:07&amp;quot;, &amp;quot;IPv4Address&amp;quot;: &amp;quot;172.17.0.7/16&amp;quot;, &amp;quot;IPv6Address&amp;quot;: &amp;quot;&amp;quot; }, 使用docker network create来创建自定义bridge docker network driver类型为host和n</description>
        <content:encoded>&lt;h2 id=&#34;docker-network基础&#34;&gt;docker network基础&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;docker 网络分为&lt;code&gt;bridge&lt;/code&gt;，&lt;code&gt;host&lt;/code&gt;，&lt;code&gt;none&lt;/code&gt;三种&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[root@zhugeqing ~]# docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
23bfb9b413e1   bridge    bridge    local
da3b8a887179   host      host      local
8124818e6997   none      null      local
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;默认情况下，创建的container会连接到bridge上&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[root@zhugeqing ~]# docker container run -d --rm --name linux1 ubuntu:21.04  /bin/sh -c &amp;quot;while true; do sleep 3600; done&amp;quot;
fb99caa72e20a4d0a86aa83840fe328e5dca179fc9dd0d59b9ecc4d2a9255e47

[root@zhugeqing ~]# docker container run -d --rm --name linux2 ubuntu:21.04  /bin/sh -c &amp;quot;while true; do sleep 3600; done&amp;quot;
07eab1fef9bb88386ffacd7a0a040c40a2d854daec50e5c818115d3a51bfaf3e

[root@zhugeqing ~]# docker network inspect bridge 

    &amp;quot;Containers&amp;quot;: {
        &amp;quot;fb99caa72e20a4d0a86aa83840fe328e5dca179fc9dd0d59b9ecc4d2a9255e47&amp;quot;: {
            &amp;quot;Name&amp;quot;: &amp;quot;linux1&amp;quot;,
            &amp;quot;EndpointID&amp;quot;: &amp;quot;4ab7071e9308743a20f22ed450dde0b1acc84803019e0963149b2a1b852efb60&amp;quot;,
            &amp;quot;MacAddress&amp;quot;: &amp;quot;02:42:ac:11:00:06&amp;quot;,
            &amp;quot;IPv4Address&amp;quot;: &amp;quot;172.17.0.6/16&amp;quot;,
            &amp;quot;IPv6Address&amp;quot;: &amp;quot;&amp;quot;
        }
        &amp;quot;07eab1fef9bb88386ffacd7a0a040c40a2d854daec50e5c818115d3a51bfaf3e&amp;quot;: {
            &amp;quot;Name&amp;quot;: &amp;quot;linux2&amp;quot;,
            &amp;quot;EndpointID&amp;quot;: &amp;quot;e86202bc76dd0d226f8f188434b6289c96b2dd648d950b0fcc7ecb2e73c78a3d&amp;quot;,
            &amp;quot;MacAddress&amp;quot;: &amp;quot;02:42:ac:11:00:07&amp;quot;,
            &amp;quot;IPv4Address&amp;quot;: &amp;quot;172.17.0.7/16&amp;quot;,
            &amp;quot;IPv6Address&amp;quot;: &amp;quot;&amp;quot;
        },
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;使用&lt;code&gt;docker network create&lt;/code&gt;来创建自定义&lt;code&gt;bridge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;docker network driver类型为&lt;code&gt;host&lt;/code&gt;和&lt;code&gt;null&lt;/code&gt;的网络有且只有一个（无法再进行创建）&lt;/li&gt;
&lt;li&gt;当一个容器连接到&lt;code&gt;host&lt;/code&gt;网络上的时候，可以与本机共享网络配置，且只能在创建容器的时候通过&lt;code&gt;--network&lt;/code&gt;参数来指定；之后无法通过&lt;code&gt;docker network disconnet&lt;/code&gt;和&lt;code&gt;docker network connect&lt;/code&gt;来控制这个容器的网络配置&lt;/li&gt;
&lt;li&gt;当一个容器连接到&lt;code&gt;none&lt;/code&gt;网络上的时候，将会只拥有一个本地环回地址，且只能在创建容器的时候通过&lt;code&gt;--network&lt;/code&gt;参数来指定；之后无法通过&lt;code&gt;docker network disconnet&lt;/code&gt;和&lt;code&gt;docker network connect&lt;/code&gt;来控制这个容器的网络配置&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;可以之后在容器内部配置网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;&lt;code&gt;docker network create&lt;/code&gt;常用参数&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;-d 指定创建docker网络的 driver（实际上，只能指定bridge，而默认也是bridge）&lt;br /&gt;
&amp;ndash;gateway 指定网络的网关地址&lt;br /&gt;
&amp;ndash;subnet 指定网络的网络地址&lt;br /&gt;
使用docker network create &amp;ndash;help 查看更多参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-network相关命令&#34;&gt;docker network相关命令&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker network create -d bridge micro&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-d&lt;/code&gt;指定网络driver，这里是&lt;code&gt;bridge&lt;/code&gt;，&lt;code&gt;micro&lt;/code&gt;，创建的bridge的名字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;docker network ls&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;列出所有的docker网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;docker network inspect micro&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;查看docker 网络 &lt;code&gt;micro&lt;/code&gt;的详情&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;code&gt;docker network connect micro linux1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;使容器&lt;code&gt;linux1&lt;/code&gt;连接到&lt;code&gt;micro&lt;/code&gt;这个docker网络上&lt;br /&gt;
可以使得同一个容器连接到多个docker 网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;code&gt;docker network disconnect micro linux1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;使容器&lt;code&gt;linux1&lt;/code&gt;取消连接到&lt;code&gt;micro&lt;/code&gt;这个docker网络上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;code&gt;docker container run -d --rm --name linux1 --network micro ubuntu:21.04  /bin/sh -c &amp;quot;while true; do sleep 3600; done&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;在docker创建容器时通过使用参数&lt;code&gt;--network&lt;/code&gt;指定容器所连接的docker网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;&lt;code&gt;docker network rm micro&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;删除&lt;code&gt;micro&lt;/code&gt;这一个docker network&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded>
        <dc:creator>诸葛青</dc:creator>
        <media:content url="https://www.zhugeqing.topimages/docker.svg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>docker</category>
            
          
        
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Docker的存储</title>
        <link>https://www.zhugeqing.top/docker/4/</link>
        <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
        
        <atom:modified>Mon, 07 Mar 2022 00:00:00 +0000</atom:modified>
        <guid>https://www.zhugeqing.top/docker/4/</guid>
        <description>Data volume 当容器被删除了，则数据也没有了 Docker主要提供了两种方式做数据的持久化 Data Volume, 由Docker管理，(/var/lib/docker/volumes), 持久化数据的最好方式 Bind Mount，由用户指定存储的数据具体mount在系统什么位置 volume 通过在DockerFile中加入VOLUME [ &amp;quot;/app&amp;quot; ]，可以使得容器中的/app目录中的数据被记录到docker volume中 也可以在执行docker run时加上-v</description>
        <content:encoded>&lt;h2 id=&#34;data-volume&#34;&gt;Data volume&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;当容器被删除了，则数据也没有了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Docker主要提供了两种方式做数据的持久化&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Data Volume&lt;/code&gt;, 由Docker管理，(/var/lib/docker/volumes), 持久化数据的最好方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bind Mount&lt;/code&gt;，由用户指定存储的数据具体mount在系统什么位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;volume&#34;&gt;volume&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;通过在DockerFile中加入&lt;code&gt;VOLUME [ &amp;quot;/app&amp;quot; ]&lt;/code&gt;，可以使得容器中的/app目录中的数据被记录到&lt;code&gt;docker volume&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;也可以在执行&lt;code&gt;docker run&lt;/code&gt;时加上&lt;code&gt;-v zhugeqing:/app&lt;/code&gt;来创建&lt;code&gt;docker volume&lt;/code&gt;（其中&lt;code&gt;zhugeqing&lt;/code&gt;为volume名字，&lt;code&gt;/app&lt;/code&gt;为映射到&lt;code&gt;docker volume&lt;/code&gt;的容器内目录名）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker volume ls&lt;/code&gt;可以来查看所有的&lt;code&gt;volume&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker volume inspect VOLUMENAME&lt;/code&gt;可以查看该&lt;code&gt;volume&lt;/code&gt;的详细信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker volume prune&lt;/code&gt;可以清理不使用&lt;code&gt;volume&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;volume练习mysql&#34;&gt;volume练习MySql&lt;/h3&gt;
&lt;h5 id=&#34;准备镜像&#34;&gt;准备镜像&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;docker pull mysql:5.7&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;创建容器&#34;&gt;创建容器&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/_/mysql?tab=description&amp;amp;page=1&amp;amp;ordering=last_updated&#34;&gt;mysql镜像的详细信息&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;执行 &lt;code&gt;docker container run --name mysql5.7 -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 -d -v mysql-data:/var/lib/mysql mysql:5.7&lt;/code&gt;来创建容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行&lt;code&gt;docker volume ls&lt;/code&gt;可以来查看所有的&lt;code&gt;volume&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行&lt;code&gt;docker volume inspect mysql-data&lt;/code&gt;来查看该容器所生成的&lt;code&gt;volume&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;验证&#34;&gt;验证&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;执行&lt;code&gt;docker container exec -it mysql5.7 mysql -u root -p&lt;/code&gt;并输入密码。在数据库中创建一个名字为&lt;code&gt;zhugeqing&lt;/code&gt;的数据库&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;ls /var/lib/docker/volumes/mysql-data/_data&lt;/code&gt;来查看生成&lt;code&gt;volume&lt;/code&gt;对应的目录，发现确实也生成了一个&lt;code&gt;zhugeqing&lt;/code&gt;的目录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bind-mount&#34;&gt;Bind Mount&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;提出一个问题：如果本地机器没有安装go环境，该如何使用docker来生成可执行文件到本机上？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;选择一个目录（比如/root），编写需要编译的go文件 /root/main.go&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;吃掉那只青蛙！&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;拉取go镜像——&lt;code&gt;docker pull golang&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用go镜像运行一个容器——&lt;code&gt;docker run -it -v $(pwd):/root golang&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换到容器内的/root/目录——&lt;code&gt;cd /root&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行&lt;code&gt;go build main.go&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;退出容器，发现本机的当前目录已经生成了一个可执行文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总结：使用这种方式可以让&lt;code&gt;本机的当前目前&lt;/code&gt;与&lt;code&gt;容器中的指定目录&lt;/code&gt;进行共享操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content:encoded>
        <dc:creator>诸葛青</dc:creator>
        <media:content url="https://www.zhugeqing.topimages/docker.svg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>docker</category>
            
          
        
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Dockerfile</title>
        <link>https://www.zhugeqing.top/docker/3/</link>
        <pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate>
        
        <atom:modified>Mon, 13 Dec 2021 00:00:00 +0000</atom:modified>
        <guid>https://www.zhugeqing.top/docker/3/</guid>
        <description>Dockerfile镜像的选择原则（from） 官方镜像优于非官方的镜像，如果没有官方镜像，则尽量选择Dockerfile开源的 固定版本tag而不是每次都使用latest 尽量选择体积小的镜像 Dockerfile Run命令 RUN 主要用于在Image里执行指令，比如安装软件，下载文件等。 Run普通写法 1 2 3 4 5 6 7 FROMubuntu:21.04RUN apt-get updateRUN apt-get install -y wgetRUN wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gzRUN tar zxf ipinfo_2.0.1_linux_amd64.tar.gzRUN mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfoRUN rm -rf ipinfo_2.0.1_linux_amd64.tar.gz 通过docker image build -f dockerfile-run-1 -t ubuntu_run:1.0 .来构建镜像 -f指定Dockerfile文件名，</description>
        <content:encoded>&lt;h2 id=&#34;dockerfile镜像的选择原则from&#34;&gt;Dockerfile镜像的选择原则（from）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;官方镜像优于非官方的镜像，如果没有官方镜像，则尽量选择Dockerfile开源的&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;固定版本tag而不是每次都使用latest&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;尽量选择体积小的镜像&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;dockerfile-run命令&#34;&gt;Dockerfile Run命令&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;RUN 主要用于在Image里执行指令，比如安装软件，下载文件等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;run普通写法&#34;&gt;Run普通写法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; ubuntu:21.04&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt-get update&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt-get install -y wget&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; tar zxf ipinfo_2.0.1_linux_amd64.tar.gz&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; rm -rf ipinfo_2.0.1_linux_amd64.tar.gz&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过&lt;code&gt;docker image build -f dockerfile-run-1 -t ubuntu_run:1.0 .&lt;/code&gt;来构建镜像&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-f&lt;/code&gt;指定Dockerfile文件名，&lt;code&gt;-t&lt;/code&gt;指定image tag，&lt;code&gt;.&lt;/code&gt;表示Dockerfile文件在当前目录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过&lt;code&gt;docker image history ubuntu_run:1.0&lt;/code&gt;来查看分层情况&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-Linux&#34; data-lang=&#34;Linux&#34;&gt;IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT
52b1dbec7f17   42 minutes ago   /bin/sh -c rm -rf ipinfo_2.0.1_linux_amd64.t…   0B        
70577d1a6d9f   42 minutes ago   /bin/sh -c mv ipinfo_2.0.1_linux_amd64 /usr/…   9.36MB    
5755b7f81c88   42 minutes ago   /bin/sh -c tar zxf ipinfo_2.0.1_linux_amd64.…   9.36MB    
3d1a66450a25   42 minutes ago   /bin/sh -c wget https://github.com/ipinfo/cl…   4.85MB    
241a8d847076   45 minutes ago   /bin/sh -c apt-get install -y wget              3.73MB    
95ae86536030   45 minutes ago   /bin/sh -c apt-get update                       35.1MB    
d662230a2592   13 days ago      /bin/sh -c #(nop)  CMD [&amp;quot;bash&amp;quot;]                 0B        
&amp;lt;missing&amp;gt;      13 days ago      /bin/sh -c #(nop) ADD file:b94883edb5db8add8…   80MB
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;每一行的RUN命令都会产生一层image layer, 导致镜像的臃肿。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;run改进写法&#34;&gt;Run改进写法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; ubuntu:21.04&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    apt-get install -y wget &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    tar zxf ipinfo_2.0.1_linux_amd64.tar.gz &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    rm -rf ipinfo_2.0.1_linux_amd64.tar.gz&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过&lt;code&gt;docker image build -f dockerfile-run-2 -t ubuntu_run:1.1 .&lt;/code&gt;来构建镜像&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-f&lt;/code&gt;指定Dockerfile文件名，&lt;code&gt;-t&lt;/code&gt;指定image tag，&lt;code&gt;.&lt;/code&gt;表示Dockerfile文件在当前目录&lt;br /&gt;
通过&lt;code&gt;docker image history ubuntu_run:1.1&lt;/code&gt;来查看分层情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-Linux&#34; data-lang=&#34;Linux&#34;&gt;204507675bd9   37 seconds ago   /bin/sh -c apt-get update &amp;amp;&amp;amp;     apt-get ins…   48.2MB    
d662230a2592   13 days ago      /bin/sh -c #(nop)  CMD [&amp;quot;bash&amp;quot;]                 0B        
&amp;lt;missing&amp;gt;      13 days ago      /bin/sh -c #(nop) ADD file:b94883edb5db8add8…   80MB     
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;文件复制和目录操作-addcopyworkdir&#34;&gt;文件复制和目录操作 (ADD,COPY,WORKDIR)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;使用&lt;code&gt;copy&lt;/code&gt;和&lt;code&gt;add&lt;/code&gt;都可以往镜像里面复制镜像，而&lt;code&gt;add&lt;/code&gt;相比于&lt;code&gt;copy&lt;/code&gt;，使用&lt;code&gt;add&lt;/code&gt;往镜像里面复制压缩文件时，&lt;code&gt;add&lt;/code&gt;会自动解压缩文件&lt;br /&gt;
&lt;code&gt;workdir&lt;/code&gt; 相当于是&lt;code&gt;cd&lt;/code&gt;(change directory)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;add&#34;&gt;ADD&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; python:3.9.5-alpine3.13&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; hello.py /app/hello.py&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;copy&#34;&gt;COPY&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; python:3.9.5-alpine3.13&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; hello.tar.gz /app/  &lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;workdir&#34;&gt;WORKDIR&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; python:3.9.5-alpine3.13&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;workdir&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /zhugeqing&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; hello.tar.gz .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;构建参数和环境变量-arg-和-env&#34;&gt;构建参数和环境变量 (ARG 和 ENV)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ARG（argument）&lt;code&gt;和&lt;/code&gt;ENV （environment）`都可以用来设置一个“变量”。 设置好变量VERSION之后可以用语法${VERSION}来使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;env&#34;&gt;ENV&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; ubuntu:21.04&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;.0.1&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    apt-get install -y wget &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    wget https://github.com/ipinfo/cli/releases/download/ipinfo-&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/ipinfo_&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;_linux_amd64.tar.gz &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    tar zxf ipinfo_&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;_linux_amd64.tar.gz &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    mv ipinfo_&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;_linux_amd64 /usr/bin/ipinfo &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    rm -rf ipinfo_&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;_linux_amd64.tar.gz&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;arg&#34;&gt;ARG&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; ubuntu:21.04&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ARG&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;.0.1&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    apt-get install -y wget &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    wget https://github.com/ipinfo/cli/releases/download/ipinfo-&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/ipinfo_&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;_linux_amd64.tar.gz &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    tar zxf ipinfo_&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;_linux_amd64.tar.gz &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    mv ipinfo_&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;_linux_amd64 /usr/bin/ipinfo &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    rm -rf ipinfo_&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;_linux_amd64.tar.gz&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;不同处&#34;&gt;不同处&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;作用范围不同，&lt;code&gt;env&lt;/code&gt;设置的变量会在image中保持，而&lt;code&gt;arg&lt;/code&gt;设置的变量只能在构建的时候用到。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arg&lt;/code&gt;设置的变量 可以在镜像&lt;code&gt;build&lt;/code&gt;的时候动态修改, 通过 &lt;code&gt;--build-arg&lt;/code&gt;进行修改（例：&lt;code&gt;docker image build -f Dockerfile-arg -t ipinfo-arg-2.0.0 --build-arg VERSION=2.0.0 .&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;使用场景区分：如果在容器运行的时候也需要使用到设置的变量，那么倾向于使用&lt;code&gt;env&lt;/code&gt;，如果只会在build镜像的时候使用到设置的变量，那么倾向于使用&lt;code&gt;arg&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;https://www.zhugeqing.top/images/docker/docker_environment_build_args.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;
&lt;h2 id=&#34;容器启动命令&#34;&gt;容器启动命令&lt;/h2&gt;
&lt;h3 id=&#34;cmd&#34;&gt;CMD&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;CMD可以用来设置容器启动时默认会执行的命令。&lt;br /&gt;
用法：&lt;code&gt;CMD &amp;lt;shell 命令&amp;gt; &lt;/code&gt;,&lt;code&gt;CMD [&amp;quot;&amp;lt;可执行文件或命令&amp;gt;&amp;quot;,&amp;quot;&amp;lt;param1&amp;gt;&amp;quot;,&amp;quot;&amp;lt;param2&amp;gt;&amp;quot;,...]&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;容器启动时默认执行的命令&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;如果docker container run启动容器时指定了其它命令，则CMD命令会被忽略&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;如果定义了多个CMD，只有最后一个会被执行&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;entrypoint&#34;&gt;ENTRYPOINT&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;CMD 设置的命令，可以在docker container run 时传入其它命令，覆盖掉 CMD 的命令，但是 ENTRYPOINT 所设置的命令是一定会被执行的。&lt;/li&gt;
&lt;li&gt;ENTRYPOINT 和 CMD 可以联合使用，ENTRYPOINT 设置执行的命令，CMD传递参数&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;shell-格式和-exec-格式&#34;&gt;Shell 格式和 Exec 格式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;如果是执行shell脚本，Exec的写法应该是&lt;code&gt;CMD [&amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;echo hello $NAME&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;shell&#34;&gt;shell&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;CMD echo &amp;quot;hello docker&amp;quot;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;ENTRYPOINT echo &amp;quot;hello docker&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;exec&#34;&gt;Exec&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ENTRYPOINT [&amp;quot;echo&amp;quot;, &amp;quot;hello docker&amp;quot;]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;CMD [&amp;quot;echo&amp;quot;, &amp;quot;hello docker&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;dockerfile技巧&#34;&gt;Dockerfile技巧&lt;/h2&gt;
&lt;h3 id=&#34;合理使用缓存&#34;&gt;合理使用缓存&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;docker构建镜像的时候会使用到缓存，但当dockerfile有一层没有使用缓存的时候，之后的命令即使没有改变也不会再使用缓存。&lt;br /&gt;
&lt;code&gt;将无需不会进行改变的命令放在最前面，有可能会改动的命令放在最后面&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;合理使用dockerignore文件&#34;&gt;合理使用.dockerignore文件&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在.dockerignore文件加入不用发送到Server的目录名或者时文件名，可以在发送build context时，将这些目录或者文件进行忽略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;docker-build-context&#34;&gt;Docker build context&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在&lt;code&gt;构建docker镜像&lt;/code&gt;的时候，需要把所需要的文件由Client发给Server，这些文件实际上就是&lt;code&gt;build context&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;一般构建&#34;&gt;一般构建&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-linux&#34; data-lang=&#34;linux&#34;&gt;[root@zhugeqing ~]# docker image build -f dockerfile -t cache ./docker
Sending build context to Docker daemon   41.6kB
Step 1/6 : FROM ubuntu:21.04
 ---&amp;gt; d662230a2592
Step 2/6 : FROM python:3.9.5-alpine3.13
 ---&amp;gt; 46a196bf50ae
Step 3/6 : workdir /root
 ---&amp;gt; Using cache
 ---&amp;gt; 6f9c40c0c5be
Step 4/6 : RUN pip install flask
 ---&amp;gt; Using cache
 ---&amp;gt; 73e539437d7e
Step 5/6 : ADD hello.py /root
 ---&amp;gt; Using cache
 ---&amp;gt; 1950e2f31676
Step 6/6 : CMD [&amp;quot;python3&amp;quot;,&amp;quot;hello.py&amp;quot;]
 ---&amp;gt; Using cache
 ---&amp;gt; 3906ec34f79f
Successfully built 3906ec34f79f
Successfully tagged cache:latest
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;dockerignore文件&#34;&gt;.dockerignore文件&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;.dockerignore文件需放在build context指定目录下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-.dockerignore&#34; data-lang=&#34;.dockerignore&#34;&gt;image-golang
out
project1
project2
project4
dockerfile-run-1
dockerfile-run-2
hello.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;进行构建&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[root@zhugeqing ~]# docker image build -f dockerfile -t cache ./docker
Sending build context to Docker daemon  7.808kB
Step 1/6 : FROM ubuntu:21.04
 ---&amp;gt; d662230a2592
Step 2/6 : FROM python:3.9.5-alpine3.13
 ---&amp;gt; 46a196bf50ae
Step 3/6 : workdir /root
 ---&amp;gt; Using cache
 ---&amp;gt; 6f9c40c0c5be
Step 4/6 : RUN pip install flask
 ---&amp;gt; Using cache
 ---&amp;gt; 73e539437d7e
Step 5/6 : ADD hello.py /root
 ---&amp;gt; Using cache
 ---&amp;gt; 1950e2f31676
Step 6/6 : CMD [&amp;quot;python3&amp;quot;,&amp;quot;hello.py&amp;quot;]
 ---&amp;gt; Using cache
 ---&amp;gt; 3906ec34f79f
Successfully built 3906ec34f79f
Successfully tagged cache:latest
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;尽量使用非root用户&#34;&gt;尽量使用非root用户&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;假如我们当前登录服务器的用户是一个普通用户，，它本身不具有sudo的权限，所以就有很多文件无法进行读写操作，比如/root目录它是无法查看的。&lt;/li&gt;
&lt;li&gt;但是如果这个用户可以使用docker，那么就可以将/root目录映射到docker container中查看，从而越权。&lt;/li&gt;
&lt;li&gt;所以在构建镜像时，尽量指定非root用户执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-DockerFile&#34; data-lang=&#34;DockerFile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; python:3.9.5-slim&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; pip install flask &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    groupadd -r flask &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; useradd -r -g flask flask &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    mkdir /src &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    chown -R flask:flask /src&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;USER&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; flask&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; app.py /src/app.py&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;FLASK_APP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;app.py&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;EXPOSE&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; 5000&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;flask&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;run&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-h&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;通过groupadd和useradd创建一个flask的组和用户&lt;br /&gt;
通过USER指定后面的命令要以flask这个用户的身份运行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;学习更多dockerfile知识&#34;&gt;学习更多DockerFile知识&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker-library/official-images&#34;&gt;Docker-library&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;可以进入官方的github仓库，然后进入library，找到某些image，然后找到文本文件中的git地址，点开地址，可以查看官方是如何编写DockerFile镜像的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker-library/official-images&#34;&gt;DockerFile&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;官方DokcerFile文档&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded>
        <dc:creator>诸葛青</dc:creator>
        <media:content url="https://www.zhugeqing.topimages/docker.svg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>docker</category>
            
          
        
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Docker镜像</title>
        <link>https://www.zhugeqing.top/docker/2/</link>
        <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
        
        <atom:modified>Fri, 10 Dec 2021 00:00:00 +0000</atom:modified>
        <guid>https://www.zhugeqing.top/docker/2/</guid>
        <description>获取image 获取image的主要方式 从registry上拉取(pull) 使用DockerFile构建(build) 从离线文件中导入(load) 从进行修改后容器中提交到一个新的镜像(commit) 第一种方式（pull） 比较常用的registry有Dock hub 和 Quay 拉取nginx镜像——docker pull nginx（docker hub） 默认是拉取最新版本，若要拉取其他版本，则用命令docker pull nginx:</description>
        <content:encoded>&lt;h2 id=&#34;获取image&#34;&gt;获取image&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;获取image的主要方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;从registry上拉取(&lt;code&gt;pull&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;使用DockerFile构建(&lt;code&gt;build&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;从离线文件中导入(&lt;code&gt;load&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;从进行修改后容器中提交到一个新的镜像(&lt;code&gt;commit&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://www.zhugeqing.top/images/docker/docker-stages.png&#34; width=&#34;70%&#34; height=&#34;50%&#34;&gt;
&lt;h3 id=&#34;第一种方式pull&#34;&gt;第一种方式（pull）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;比较常用的registry有&lt;a href=&#34;https://hub.docker.com/&#34;&gt;Dock hub&lt;/a&gt; 和 &lt;a href=&#34;https://quay.io/&#34;&gt;Quay&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;拉取nginx镜像——&lt;code&gt;docker pull nginx&lt;/code&gt;（docker hub）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;默认是拉取最新版本，若要拉取其他版本，则用命令&lt;code&gt;docker pull nginx:1.21.4&lt;/code&gt;（&lt;code&gt;1.21.4&lt;/code&gt;为版本号，前面加&lt;code&gt;:&lt;/code&gt;）&lt;br /&gt;
若是其他&lt;code&gt;registry&lt;/code&gt;，比如&lt;a href=&#34;https://quay.io/&#34;&gt;Quay&lt;/a&gt; ，可以进入官网查看相关&lt;code&gt;拉取路径和版本号&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;notices info&#34; data-title=&#34;Info&#34;&gt;
  可以使用&lt;code&gt;docker image inspect nginx&lt;/code&gt;查看image的详细信息（如完整ID号，tag，适用架构、系统等）
&lt;/div&gt;
&lt;h3 id=&#34;第二种方式build&#34;&gt;第二种方式（build）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Dockerfile是用于构建docker镜像的文件&lt;br /&gt;
Dockerfile里包含了构建镜像所需的“指令”&lt;br /&gt;
Dockerfile有其特定的语法规则&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;编写DockerFile&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; ubuntu:21.04&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;DEBIAN_FRONTEND&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;noninteractive apt-get install --no-install-recommends -y python3.9 python3-pip python3.9-dev&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; hello.py /&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;python3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/hello.py&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;编写任意Python文件&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;你好,诸葛青！&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;通过build构建镜像&lt;br /&gt;
&lt;code&gt;docker image build -t hello:1.0 .&lt;/code&gt;（&lt;code&gt;-t表示tag&lt;/code&gt;，&lt;code&gt;hello:1.0为镜像名加版本号&lt;/code&gt;，&lt;code&gt;.表示build context（构建镜像需要发送到镜像里面的目录，这里的.表示dockerfile所在目录）,若加-f参数，则可以dockerfile可以单独指定路径&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第三种方式load&#34;&gt;第三种方式（load）&lt;/h3&gt;
&lt;p&gt;将镜像文件导出：&lt;code&gt;docker image save nginx:1.21.4 -o nginx_1.12.4_image&lt;/code&gt;（选项-o表示输出）&lt;br /&gt;
将镜像文件导入：&lt;code&gt;docker image load -i nginx_1.12.4_image&lt;/code&gt;（选项-i表示输入）&lt;/p&gt;
&lt;h3 id=&#34;第四种方式commit&#34;&gt;第四种方式（commit）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;docker container run --publish 214:80 -it nginx:1.21.4 sh&lt;/code&gt;&lt;br /&gt;
&lt;div class=&#34;notices info&#34; data-title=&#34;Info&#34;&gt;
  &lt;code&gt;--publish 214:80&lt;/code&gt;表示将docker内的80端口映射为主机的214端口，&lt;code&gt;-it&lt;/code&gt;表示以交互式的方式运行，&lt;code&gt;sh&lt;/code&gt;表示打开shell
&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd /usr/share/nginx/html&lt;/code&gt; ，&lt;code&gt;echo &amp;quot;&amp;lt;h&amp;gt; 你好 诸葛青！&amp;lt;/h&amp;gt;&amp;quot; &amp;gt; index.html&lt;/code&gt;，&lt;code&gt;exit&lt;/code&gt;&lt;br /&gt;
&lt;div class=&#34;notices info&#34; data-title=&#34;Info&#34;&gt;
  第一条命令是转到nginx的index.html的存储路径下，第二条命令是修改默认的index.html，第三条命令是退出容器的shell
&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;docker container commit f12 zhugeqing/nginx&lt;/code&gt;&lt;br /&gt;
&lt;div class=&#34;notices info&#34; data-title=&#34;Info&#34;&gt;
  &lt;code&gt;f12&lt;/code&gt;为开启容器的ID，&lt;code&gt;zhugeqing/nginx&lt;/code&gt;为打包之后的镜像名
&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;docker container commit c5 zhugeqing/nginx&lt;/code&gt;将正在ID前缀为c5的容器打包成名字为&amp;quot;zhugeqing/nginx&amp;quot;的镜像&lt;/p&gt;
&lt;h2 id=&#34;删除image&#34;&gt;删除image&lt;/h2&gt;
&lt;p&gt;删除&lt;code&gt;image&lt;/code&gt;使用&lt;code&gt;docker image rm 2f1&lt;/code&gt;。（2f1为镜像的ID号前缀，或者是image名字:tag的形式）&lt;br /&gt;
&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34; data-dir=&#34;ltr&#34;&gt;删除的前提是该镜像没有被使用，如果用该镜像运行了一个&lt;code&gt;container&lt;/code&gt;，就算是停止了运行，也一样不能删除，因为停止的&lt;code&gt;container&lt;/code&gt;可能会在之后运行，所以不能直接删除&lt;code&gt;image&lt;/code&gt;，需要先使用&lt;code&gt;imgae container stop d61&lt;/code&gt;停止容器运行再用&lt;code&gt;imgae container rm d61&lt;/code&gt;删除容器再来删除镜像（d61为容器的ID号前缀），如果有多个容器关联了该镜像，那么需要把这些容器都删除才能删除被使用的镜像。&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&#34;分享image&#34;&gt;分享image&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过&lt;code&gt;docker login&lt;/code&gt;来登录Docker hub账号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过&lt;code&gt;docker image tag hello zhugeqing/hello:1.0&lt;/code&gt;来将需要分享的镜像修改成&lt;code&gt;账户名/image名:tag&lt;/code&gt;的形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过&lt;code&gt;docker image push zhugeqing/hello:1.0&lt;/code&gt;将镜像push到个人Repositories。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;scratch镜像&#34;&gt;Scratch镜像&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Scratch是一个空的Docker镜像&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded>
        <dc:creator>诸葛青</dc:creator>
        <media:content url="https://www.zhugeqing.topimages/docker.svg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>docker</category>
            
          
        
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Docker</title>
        <link>https://www.zhugeqing.top/docker/</link>
        <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
        
        <atom:modified>Thu, 09 Dec 2021 00:00:00 +0000</atom:modified>
        <guid>https://www.zhugeqing.top/docker/</guid>
        <description></description>
        <content:encoded></content:encoded>
        <dc:creator>诸葛青</dc:creator>
        <media:content url="https://www.zhugeqing.topimages/docker.svg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
          
        
        
        
          
            
              <category>Docker</category>
            
          
        
      </item>
      
      <item>
        <title>Docker快速上手</title>
        <link>https://www.zhugeqing.top/docker/1/</link>
        <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
        
        <atom:modified>Thu, 09 Dec 2021 00:00:00 +0000</atom:modified>
        <guid>https://www.zhugeqing.top/docker/1/</guid>
        <description>在Linux中安装Docker 以root用户权限键入以下命令即可完成安装（适用于任何版本的Linux系统） curl -fsSL get.docker.com -o get-docker.sh 来获取安装的脚本文件 sh get-docker.sh 执行已经下载好的脚本文件 systemctl start docker centos启动docker systemctl enable docker centos设置docker自启动 基本使用 docker version来查看docker版本，判断是否安装成功 docker info 来查看更加详细的docker环境信息 docker 来查看docker命令的用法 docker container ls 列出当前正在运行的容器</description>
        <content:encoded>&lt;h2 id=&#34;在linux中安装docker&#34;&gt;在Linux中安装Docker&lt;/h2&gt;
&lt;p&gt;以root用户权限键入以下命令即可完成安装（适用于任何版本的Linux系统）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;curl -fsSL get.docker.com -o get-docker.sh&lt;/code&gt; 来获取安装的脚本文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sh get-docker.sh&lt;/code&gt; 执行已经下载好的脚本文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;systemctl start docker&lt;/code&gt; centos启动docker&lt;/li&gt;
&lt;li&gt;&lt;code&gt;systemctl enable docker&lt;/code&gt; centos设置docker自启动&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;基本使用&#34;&gt;基本使用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker version&lt;/code&gt;来查看docker版本，判断是否安装成功&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker info&lt;/code&gt; 来查看更加详细的docker环境信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt; 来查看docker命令的用法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container ls&lt;/code&gt; 列出当前正在运行的容器&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;docker ps 和 docker container ps也有一样的效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;code&gt;docker container ps -a&lt;/code&gt; 列出所有状态的容器（不只是正在运行的容器）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container run -d nginx&lt;/code&gt; 运行nginx这个镜像并且以后台方式运行（不加-d就是以前台方式运行）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如果没有这个镜像会自动拉取&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;&lt;code&gt;docker container stop 214&lt;/code&gt; 停止container id为214或者是id前缀为214的container&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;docker stop 214也有一样的效果（涉及到以前版本的docker保留的命令格式）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;&lt;code&gt;docker container ls -q&lt;/code&gt; 列出当前正在运行的容器的ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container stop $(docker container ls -q)&lt;/code&gt; 批处理，停止所有当前正在运行的容器&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;docker container rm $(docker container ls -aq)&lt;/code&gt; 删除所有容器(如果要删除运行状态的还需要加上-f强制删除的参数，如&lt;br /&gt;
&lt;code&gt;docker container rm $(docker container ls -aq) -f&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;&lt;code&gt;docker image ls&lt;/code&gt; 列出本机已安装的docker镜像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image rm nginx&lt;/code&gt; 删除nginx这个镜像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker conainer --help&lt;/code&gt; 查看更多与容器有关的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image --help&lt;/code&gt; 查看更多与镜像有关的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker system prune -f&lt;/code&gt; 删除所有已经停止运行的容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image prune -a&lt;/code&gt; 删除所有没有被使用的镜像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container run --rm nginx&lt;/code&gt; 当容器退出时，会自动删除容器&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;容器的attached-和-detached模式&#34;&gt;容器的attached 和 detached模式&lt;/h2&gt;
&lt;p&gt;在启动一个容器加上-d参数就可以以daemon守护进程的方式运行也就是detached模式，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从detached模式切换到attached模式&lt;br /&gt;
&lt;code&gt;docker attach zhugeqing&lt;/code&gt; 切换到容器ID或者ID前缀为zhugeqing的容器的attached模式，当按下ctrl+c时会退出，当然，同样会停止容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在detached模式查看attached模式的信息&lt;br /&gt;
&lt;code&gt;docker container logs zhugeqing&lt;/code&gt; 查看容器ID或者ID前缀为zhugeqing的容器的日志（加入-f可以动态跟踪log）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;连接容器的shell&#34;&gt;连接容器的shell&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker container run -it ubuntu sh&lt;/code&gt; 创建一个ubuntu容器并进入交互式模式&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;键入exit退出shell并停止容器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;docker container exec -it c_ID sh&lt;/code&gt;在一个已经运行的容器（ID为c_ID）里执行一个额外的command，此时输入exit退出命令行并不会停止容器&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;容器即是进程&#34;&gt;容器即是进程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ps -ef | grep nginx&lt;/code&gt; 查看与nginx有关的进程&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-Linux&#34; data-lang=&#34;Linux&#34;&gt;root         807       1  0 Dec03 ?        00:00:00 nginx: master process /www/server/nginx/sbin/nginx -c /www/server/nginx/conf/nginx.conf
www       355327     807  0 Dec07 ?        00:00:12 nginx: worker process
www       355328     807  0 Dec07 ?        00:00:01 nginx: cache manager process
root      867209  867191  0 22:58 ?        00:00:00 nginx: master process nginx -g daemon off;
101       867260  867209  0 22:58 ?        00:00:00 nginx: worker process
root      868528  859209  0 23:15 pts/0    00:00:00 grep --color=auto nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;font color=VioletRed&gt; &lt;/font&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;pstree -halps 867260&lt;/code&gt; 查看这个nginx进程的进程树&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-Linux&#34; data-lang=&#34;Linux&#34;&gt;systemd,1 --switched-root --system --deserialize 18
  └─containerd-shim,867191 -namespace moby -id 9c0ce97e9ca1f99ed4bd6b2c11f6ca472786c69fba512bacf7097fce18e75fb8 -address /run/containerd/containerd.sock
      └─nginx,867209
          └─nginx,867260
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;font color=VioletRed&gt; &lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再使用&lt;code&gt;docker ps&lt;/code&gt;来查看nginx所对应的container ID，就会发现与上面进程树的那个最长的进程名里面的字段一样，所以运行了一个容器就是运行了一个进程，或者是使用 &lt;code&gt;docker top ID&lt;/code&gt;来查看容器的进程，一样是存在于Linux系统中的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-run背后的故事&#34;&gt;docker run背后的故事&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker container run -d -p 80:80 --name webServer nginx&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-d表示daemon守护进程，-p 80:80表示将容器内的端口80暴露给容器外的端口80端口，前面的是容器外端口（也就是主机端口），后面的是容器内端口， &amp;ndash;name webServer表示为nginx这个容器起一个别名（不加这个参数，docker会自动起一个其他的名字）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在本地查找是否有nginx这个image镜像，如果没有发现&lt;/li&gt;
&lt;li&gt;去远程的image registry查找nginx镜像（默认的registry是Docker Hub)&lt;/li&gt;
&lt;li&gt;下载最新版本的nginx镜像 （nginx:latest 默认)&lt;/li&gt;
&lt;li&gt;基于nginx镜像来创建一个新的容器，并且准备运行&lt;/li&gt;
&lt;li&gt;docker engine分配给这个容器一个虚拟IP地址&lt;/li&gt;
&lt;li&gt;在宿主机上打开80端口并把容器的80端口转发到宿主机上&lt;/li&gt;
&lt;li&gt;启动容器，运行指定的命令（一个默认shell脚本去启动nginx）&lt;/li&gt;
&lt;/ol&gt;
</content:encoded>
        <dc:creator>诸葛青</dc:creator>
        <media:content url="https://www.zhugeqing.topimages/docker.svg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>docker</category>
            
          
        
        
        
          
            
          
        
      </item>
      
      <item>
        <title>解决使用docker出现的问题！</title>
        <link>https://www.zhugeqing.top/docker/tips/</link>
        <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
        
        <atom:modified>Mon, 06 Dec 2021 00:00:00 +0000</atom:modified>
        <guid>https://www.zhugeqing.top/docker/tips/</guid>
        <description>使用mysql image的一些问题 无法远程访问到mysql容器 保证运行映射的mysql容器内端口为3306，主机端口可以任意选择，并保证该端口防火墙是关闭的 删除容器恢复数据库内容 当使用了docker volume时，删除mysql容器，再次运行时无须加入 密码参数，只要volum还是同一个，数据就依然存在 操作mysql添加一些中文值会显示问号 配置mysql容器中的配置文件，像配置主机mysql一样，但</description>
        <content:encoded>&lt;h2 id=&#34;使用mysql-image的一些问题&#34;&gt;使用mysql image的一些问题&lt;/h2&gt;
&lt;h3 id=&#34;无法远程访问到mysql容器&#34;&gt;无法远程访问到mysql容器&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;保证运行映射的mysql容器内端口为3306，主机端口可以任意选择，并保证该端口防火墙是关闭的&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;删除容器恢复数据库内容&#34;&gt;删除容器恢复数据库内容&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;当使用了docker volume时，删除mysql容器，再次运行时无须加入 密码参数，只要volum还是同一个，数据就依然存在&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;操作mysql添加一些中文值会显示问号&#34;&gt;操作mysql添加一些中文值会显示问号&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;配置mysql容器中的配置文件，像配置主机mysql一样，但前提是安装一些可编辑mysql容器文件的程序，比如vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;可以得知mysql内部容器包含apt命令，配置国内镜像源并安装一些自己需要的命令&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;配置国内镜像源并更新镜像源&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;mv /etc/apt/sources.list /etc/apt/sources.list.bak&lt;/li&gt;
&lt;li&gt;echo &amp;ldquo;deb &lt;a href=&#34;http://mirrors.163.com/debian/&#34;&gt;http://mirrors.163.com/debian/&lt;/a&gt; jessie main non-free contrib&amp;rdquo; &amp;gt;/etc/apt/sources.list&lt;/li&gt;
&lt;li&gt;echo &amp;ldquo;deb &lt;a href=&#34;http://mirrors.163.com/debian/&#34;&gt;http://mirrors.163.com/debian/&lt;/a&gt; jessie-proposed-updates main non-free contrib&amp;rdquo; &amp;raquo;/etc/apt/sources.list&lt;/li&gt;
&lt;li&gt;echo &amp;ldquo;deb-src &lt;a href=&#34;http://mirrors.163.com/debian/&#34;&gt;http://mirrors.163.com/debian/&lt;/a&gt; jessie main non-free contrib&amp;rdquo; &amp;raquo;/etc/apt/sources.list&lt;/li&gt;
&lt;li&gt;echo &amp;ldquo;deb-src &lt;a href=&#34;http://mirrors.163.com/debian/&#34;&gt;http://mirrors.163.com/debian/&lt;/a&gt; jessie-proposed-updates main non-free contrib&amp;rdquo; &amp;raquo;/etc/apt/sources.list&lt;/li&gt;
&lt;li&gt;apt-get update&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;code&gt;安装vim&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;apt-get install -y vim&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;编辑配置文件&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;cd /etc/mysql/mysql.conf.d &amp;amp;&amp;amp; vim mysqld.cnf&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-Conf&#34; data-lang=&#34;Conf&#34;&gt;# 粘贴下列文件
[mysqld]
pid-file        = /var/run/mysqld/mysqld.pid
socket          = /var/run/mysqld/mysqld.sock
datadir         = /var/lib/mysql
#log-error      = /var/log/mysql/error.log
# By default we only accept connections from localhost
#bind-address   = 127.0.0.1
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0
character_set_server=utf8
init_connect=&#39;SET NAMES utf8&#39;
max_allowed_packet = 20M

[mysql]
default-character-set = utf8

[mysql.server]
default-character-set = utf8

[mysqld_safe]
default-character-set = utf8

[client]
default-character-set = utf8
&lt;/code&gt;&lt;/pre&gt;</content:encoded>
        <dc:creator>诸葛青</dc:creator>
        <media:content url="https://www.zhugeqing.topimages/docker.svg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>docker</category>
            
          
        
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>