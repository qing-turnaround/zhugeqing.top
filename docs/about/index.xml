<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>笔记 on 诸葛青的编程之旅</title>
    <link>https://www.zhugeqing.top/about/</link>
    <description>Recent content in 笔记 on 诸葛青的编程之旅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>[备案号：湘ICP备2021009076号](https://beian.miit.gov.cn/)</copyright>
    <lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate>
    <sy:updatePeriod>weekly&#39;</sy:updatePeriod>
    
        <atom:link href="https://www.zhugeqing.top/about/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>git笔记</title>
        <link>https://www.zhugeqing.top/about/git/</link>
        <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
        
        <atom:modified>Sun, 13 Dec 2020 00:00:00 +0000</atom:modified>
        <guid>https://www.zhugeqing.top/about/git/</guid>
        <description>1.创建仓库命令 1.创建版本库(初始化仓库) &amp;mdash;&amp;mdash; git init 2.拷贝一份远程仓库，也就是下载一个项目 &amp;mdash;&amp;mdash; git clone 2.提交与修改 1.添加文件到暂存区 &amp;mdash;&amp;mdash; git add 2.查看仓库当前的状态，显示有变更的文件 &amp;mdash;&amp;mdash; git status 3.比较文件的不同，即暂存区和工作区的区别 &amp;mdash;&amp;mdash; git diff 4.提交暂存区到本地仓库 &amp;mdash;&amp;mdash; git commit 7.回退版本 &amp;mdash;&amp;mdash; git reset 8.删除工作区的文件 &amp;mdash;&amp;mdash; git rm 9.移动或者重命名工作区的文件 &amp;mdash;&amp;mdash; git mv 2.1提交日志 1.查看历史提交记录 &amp;mdash;&amp;mdash; git log 2.以列表形式查看指</description>
        <content:encoded>&lt;h2 id=&#34;1创建仓库命令&#34;&gt;1.创建仓库命令&lt;/h2&gt;
&lt;p&gt;1.创建版本库(初始化仓库) &amp;mdash;&amp;mdash; git init&lt;/p&gt;
&lt;p&gt;2.拷贝一份远程仓库，也就是下载一个项目  &amp;mdash;&amp;mdash; git clone&lt;/p&gt;
&lt;h2 id=&#34;2提交与修改&#34;&gt;2.提交与修改&lt;/h2&gt;
&lt;p&gt;1.添加文件到暂存区 &amp;mdash;&amp;mdash; git add&lt;/p&gt;
&lt;p&gt;2.查看仓库当前的状态，显示有变更的文件 &amp;mdash;&amp;mdash; git status&lt;/p&gt;
&lt;p&gt;3.比较文件的不同，即暂存区和工作区的区别 &amp;mdash;&amp;mdash; git diff&lt;/p&gt;
&lt;p&gt;4.提交暂存区到本地仓库 &amp;mdash;&amp;mdash; git commit&lt;/p&gt;
&lt;p&gt;7.回退版本 &amp;mdash;&amp;mdash; git reset&lt;/p&gt;
&lt;p&gt;8.删除工作区的文件 &amp;mdash;&amp;mdash; git rm&lt;/p&gt;
&lt;p&gt;9.移动或者重命名工作区的文件 &amp;mdash;&amp;mdash; git mv&lt;/p&gt;
&lt;h3 id=&#34;21提交日志&#34;&gt;2.1提交日志&lt;/h3&gt;
&lt;p&gt;1.查看历史提交记录 &amp;mdash;&amp;mdash; git log&lt;/p&gt;
&lt;p&gt;2.以列表形式查看指定文件的历史修改记录 &amp;mdash;&amp;mdash; git blame &lt;file&gt;&lt;/p&gt;
&lt;h3 id=&#34;22远程操作&#34;&gt;2.2远程操作&lt;/h3&gt;
&lt;p&gt;1.远程仓库操作 &amp;mdash;&amp;mdash; git remote&lt;/p&gt;
&lt;p&gt;2.从远程获取代码库 &amp;mdash;&amp;mdash; git fetch&lt;/p&gt;
&lt;p&gt;3.下载远程代码并合并 &amp;mdash;&amp;mdash; git pull&lt;/p&gt;
&lt;p&gt;4.上传远程代码并合并 &amp;mdash;&amp;mdash; git push&lt;/p&gt;
&lt;h2 id=&#34;3git-分支管理&#34;&gt;3.git 分支管理&lt;/h2&gt;
&lt;p&gt;1.列出分支 &amp;mdash;&amp;mdash; git branch(无参数时)&lt;/p&gt;
&lt;p&gt;2.创建新分支 &amp;mdash;&amp;mdash; git branch branchname(branchname为想要创建的分支名)&lt;/p&gt;
&lt;p&gt;3.切换到分支 &amp;mdash;&amp;mdash; git checkout branchname(branchname为想要切换到的分支名)&lt;/p&gt;
&lt;p&gt;4.创建新分支并切换到该分支下 &amp;mdash;&amp;mdash; git checkout -b branchname(branchname为想要创建的分支名)&lt;/p&gt;
&lt;p&gt;5.删除分支 &amp;mdash;&amp;mdash; git branch -d branchname(branchname为想要删除的分支名)&lt;/p&gt;
&lt;p&gt;6.合并分支 &amp;mdash;&amp;mdash; git merge /git rebase&lt;/p&gt;
&lt;h5 id=&#34;rebase优缺点&#34;&gt;rebase优缺点&lt;/h5&gt;
&lt;h5 id=&#34;优点&#34;&gt;优点：&lt;/h5&gt;
&lt;h5 id=&#34;rebase-使你的提交树变得很干净-所有的提交都在一条线上&#34;&gt;Rebase 使你的提交树变得很干净, 所有的提交都在一条线上&lt;/h5&gt;
&lt;h5 id=&#34;缺点&#34;&gt;缺点：&lt;/h5&gt;
&lt;h5 id=&#34;rebase-修改了提交树的历史&#34;&gt;Rebase 修改了提交树的历史&lt;/h5&gt;
&lt;h5 id=&#34;merge优缺点&#34;&gt;merge优缺点&lt;/h5&gt;
&lt;h5 id=&#34;优点-1&#34;&gt;优点:&lt;/h5&gt;
&lt;h5 id=&#34;merge可以保留提交历史&#34;&gt;merge可以保留提交历史&lt;/h5&gt;
&lt;h5 id=&#34;缺点-1&#34;&gt;缺点：&lt;/h5&gt;
&lt;h5 id=&#34;merge使你的提交树变得复杂提交由多条线相连&#34;&gt;merge使你的提交树变得复杂，提交由多条线相连&lt;/h5&gt;
&lt;p&gt;7.解决冲突 &amp;mdash;&amp;mdash; 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。&lt;/p&gt;
&lt;h2 id=&#34;4git-查看提交历史&#34;&gt;4.git 查看提交历史&lt;/h2&gt;
&lt;p&gt;1.查看历史提交记录 &amp;mdash;&amp;mdash; git log&lt;/p&gt;
&lt;p&gt;2.以列表形式查看指定文件的历史修改记录 &amp;mdash;&amp;mdash; git blame &lt;file&gt;&lt;/p&gt;
&lt;h2 id=&#34;5git-标签&#34;&gt;5.git 标签&lt;/h2&gt;
&lt;p&gt;1.查看所有标签 &amp;mdash;&amp;mdash; git tag&lt;/p&gt;
&lt;p&gt;2.为当前分支创建标签 &amp;mdash;&amp;mdash; git tag -a v1.0(不带&amp;quot;-a&amp;quot;也行,但建议带上)&lt;/p&gt;
&lt;p&gt;3.创建带有说明的标签 &amp;mdash;&amp;mdash; git tag -a v0.1 -m &amp;ldquo;runoob.com标签&amp;rdquo;（用-a指定标签名，-m指定说明文字：）&lt;/p&gt;
&lt;p&gt;4.查看标签说明文字 &amp;mdash;&amp;mdash; git show v0.1&lt;/p&gt;
&lt;h5 id=&#34;注意标签总是和某个commit挂钩如果这个commit既出现在master分支又出现在dev分支那么在这两个分支上都可以看到这个标签&#34;&gt;(注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。)&lt;/h5&gt;
&lt;h2 id=&#34;6git-修改本地和查看本地属性&#34;&gt;6.Git 修改本地和查看本地属性&lt;/h2&gt;
&lt;h3 id=&#34;1git-config---local---list查看本地设置&#34;&gt;1.git config &amp;ndash;local &amp;ndash;list(查看本地设置)&lt;/h3&gt;
&lt;h3 id=&#34;2git-config---global-usernameemail修改本地属性加不加--global区别在于是否是修改全局变量&#34;&gt;2.git config &amp;ndash;global user.name/email(修改本地属性,加不加&amp;ndash;global区别在于是否是修改全局变量)&lt;/h3&gt;
&lt;h2 id=&#34;7git-远程仓库github&#34;&gt;7.git 远程仓库(Github)&lt;/h2&gt;
&lt;h3 id=&#34;1添加远程库--------git-remote-add-origin-urlorigin-为给远程库取的一个别名&#34;&gt;1添加远程库 &amp;mdash;&amp;mdash; git remote add origin [url](origin 为给远程库取的一个别名)&lt;/h3&gt;
&lt;h6 id=&#34;由于你的本地-git-仓库和-github-仓库之间的传输是通过ssh加密的所以我们需要配置验证信息&#34;&gt;由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：&lt;/h6&gt;
&lt;h6 id=&#34;使用以下命令生成-ssh-keyssh-keygen--t-rsa--c-youremailexamplecom&#34;&gt;使用以下命令生成 SSH Key：ssh-keygen -t rsa -C &amp;ldquo;&lt;a href=&#34;mailto:youremail@example.com&#34;&gt;youremail@example.com&lt;/a&gt;&amp;rdquo;&lt;/h6&gt;
&lt;h6 id=&#34;后面的-your_emailyouremailcom-改为你在-github-上注册的邮箱之后会要求确认路径和输入密码我们这使用默认的一路回车就行成功的话会在--下生成-ssh-文件夹进去打开-id_rsapub复制里面的-key回到-github-上进入-account--settings账户配置左边选择-ssh-and-gpg-keys然后点击-new-ssh-key-按钮title-设置标题可以随便填粘贴在你电脑上生成的-key&#34;&gt;后面的 &lt;a href=&#34;mailto:your_email@youremail.com&#34;&gt;your_email@youremail.com&lt;/a&gt; 改为你在 Github 上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在 ~/ 下生成 .ssh 文件夹，进去，打开 id_rsa.pub，复制里面的 key。回到 github 上，进入 Account =&amp;gt; Settings（账户配置）。左边选择 SSH and GPG keys，然后点击 New SSH key 按钮,title 设置标题，可以随便填，粘贴在你电脑上生成的 key&lt;/h6&gt;
&lt;h3 id=&#34;2查看当前的远程库--------git-remote--v&#34;&gt;2查看当前的远程库 &amp;mdash;&amp;mdash; git remote -v&lt;/h3&gt;
&lt;h3 id=&#34;3拉取远程仓库&#34;&gt;3拉取远程仓库&lt;/h3&gt;
&lt;p&gt;1.从远程仓库下载新分支与数据 &amp;mdash;&amp;mdash; git fetch&lt;/p&gt;
&lt;p&gt;2从远端仓库提取数据并尝试合并到当前分支 &amp;mdash;&amp;mdash; git merge&lt;/p&gt;
&lt;h3 id=&#34;4推送到远程仓库--------git-push-origin-branchbranch为远程仓库的分支名&#34;&gt;4推送到远程仓库 &amp;mdash;&amp;mdash; git push origin branch(branch为远程仓库的分支名)&lt;/h3&gt;
&lt;h3 id=&#34;5删除远程仓库--------git-remote-rm-origin&#34;&gt;5删除远程仓库 &amp;mdash;&amp;mdash; git remote rm origin&lt;/h3&gt;
&lt;h2 id=&#34;8git-服务器搭建&#34;&gt;8.git 服务器搭建&lt;/h2&gt;
&lt;h3 id=&#34;1安装-git-------sudo-apt-get-install-gitubuntu下的下载windows可上网查询&#34;&gt;1.安装 git &amp;mdash;&amp;mdash;sudo apt-get install git(ubuntu下的下载,windows可上网查询)&lt;/h3&gt;
&lt;h5 id=&#34;接下来我们-创建一个用户用来运行git服务的用户&#34;&gt;接下来我们 创建一个用户用来运行git服务的用户&lt;/h5&gt;
&lt;h6 id=&#34;-sudo-adduser-zhugeqing&#34;&gt;$ sudo adduser zhugeqing&lt;/h6&gt;
&lt;h3 id=&#34;2创建证书登录&#34;&gt;2.创建证书登录&lt;/h3&gt;
&lt;h6 id=&#34;虽然是私有的git服务器但是也不能允许主机随意向git服务器推送代码因此必须将需要使用git服务器即需要登录到git服务器的主机的公钥即id_rsapub文件导入git服务器的homegitsshauthorized_keys文件里一行一个&#34;&gt;虽然是私有的Git服务器，但是也不能允许主机随意向Git服务器推送代码。因此，必须将需要使用Git服务器，即需要登录到Git服务器的主机的公钥（即id_rsa.pub文件）导入Git服务器的/home/git/.ssh/authorized_keys文件里，一行一个&lt;/h6&gt;
&lt;p&gt;###3.初始化Git仓库&lt;/p&gt;
&lt;h5 id=&#34;如果我们使用tmpxingyoujigit做为远程仓库则需要在tmp目录下执行&#34;&gt;如果我们使用/tmp/xingyouji.git做为远程仓库，则需要在/tmp目录下执行：&lt;/h5&gt;
&lt;h6 id=&#34;sudo-git-init---bare-xingyoujigit&#34;&gt;sudo git init &amp;ndash;bare xingyouji.git&lt;/h6&gt;
&lt;h3 id=&#34;4克隆仓库&#34;&gt;4.克隆仓库&lt;/h3&gt;
&lt;h5 id=&#34;git-clone-git192168454homegitrepoxingyoujigit&#34;&gt;git clone &lt;a href=&#34;mailto:git@192.168.45.4&#34;&gt;git@192.168.45.4&lt;/a&gt;:/home/gitrepo/xingyouji.git&lt;/h5&gt;
&lt;h6 id=&#34;192168454-为-git-所在服务器-ip-你需要将其修改为你自己的-git-服务-ip这样我们的-git-服务器安装就完成&#34;&gt;192.168.45.4 为 Git 所在服务器 ip ，你需要将其修改为你自己的 Git 服务 ip，这样我们的 Git 服务器安装就完成。&lt;/h6&gt;
&lt;h2 id=&#34;9git-gitee码云httpsgiteecom&#34;&gt;9.&lt;a href=&#34;https://gitee.com/&#34;&gt;Git Gitee（码云)&lt;/a&gt;&lt;/h2&gt;
&lt;h6 id=&#34;大家都知道国内访问-github-速度比较慢很影响我们的使用如果你希望体验到-git-飞一般的速度可以使用国内的-git-托管服务giteegiteecom&#34;&gt;大家都知道国内访问 Github 速度比较慢，很影响我们的使用。如果你希望体验到 Git 飞一般的速度，可以使用国内的 Git 托管服务——Gitee（gitee.com），&lt;/h6&gt;
&lt;h6 id=&#34;gitee-提供免费的-git-仓库还集成了代码质量检测项目演示等功能对于团队协作开发gitee-还提供了项目管理代码托管文档管理的服务5-人以下小团队免费--&#34;&gt;Gitee 提供免费的 Git 仓库，还集成了代码质量检测、项目演示等功能。对于团队协作开发，Gitee 还提供了项目管理、代码托管、文档管理的服务，5 人以下小团队免费  。&lt;/h6&gt;
&lt;p&gt;1.我们先在 Gitee 上注册账号并登录后，然后上传自己的 SSH 公钥&lt;/p&gt;
&lt;p&gt;2.其他操作根据需求操作，与上述操作无大区别&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.zhugeqing.top/images/about/git.jpg&#34;/&gt; 
&lt;/figure&gt;

</content:encoded>
        <dc:creator>诸葛青的编程之旅</dc:creator>
        <media:content url="https://www.zhugeqing.topimages/recommend_site/xingyouji.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
        
        
      </item>
      

    
  </channel>
</rss>